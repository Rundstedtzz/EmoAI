{"ast":null,"code":"var _jsxFileName = \"/Users/ricky/Desktop/virtual-friends/src/components/CreateFriend.js\",\n  _s = $RefreshSig$();\n// CreateFriend.js\nimport React, { useState } from 'react';\nimport './CreateFriend.css'; // Make sure to create and link this CSS file\n\n// Define the MBTI types and their corresponding button colors\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst mbtiTypes = [{\n  types: ['INTJ', 'INTP', 'ENTJ', 'ENTP'],\n  color: 'lightpurple'\n}, {\n  types: ['INFJ', 'INFP', 'ENFJ', 'ENFP'],\n  color: 'lightgreen'\n}, {\n  types: ['ISTJ', 'ISFJ', 'ESTJ', 'ESFJ'],\n  color: 'lightyellow'\n}, {\n  types: ['ISTP', 'ISFP', 'ESTP', 'ESFP'],\n  color: 'lightblue'\n}];\nfunction CreateFriend() {\n  _s();\n  // State hooks for selected type, trait, and virtual friend's name\n  const [selectedType, setSelectedType] = useState(null);\n  const [selectedTrait, setSelectedTrait] = useState('');\n  const [virtualFriendName, setVirtualFriendName] = useState('');\n\n  // Function to handle MBTI type button click\n  const handleTypeClick = type => {\n    setSelectedType(type);\n    // Reset the friend's name and trait whenever a new type is selected\n    setVirtualFriendName('');\n    setSelectedTrait('');\n  };\n\n  // Function to handle trait button click\n  const handleTraitClick = trait => {\n    setSelectedTrait(trait);\n    // Reset the friend's name whenever a new trait is selected\n    setVirtualFriendName('');\n  };\n\n  // Construct the path for the avatar image\n  const avatarPath = selectedType && selectedTrait ? `/avatars/${selectedType}-${selectedTrait}.png` : '/avatars/default-avatar.png'; // A default placeholder image\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"create-friend-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"selection-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mbti-types\",\n        children: mbtiTypes.map((group, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mbti-row\",\n          children: group.types.map(type => /*#__PURE__*/_jsxDEV(\"button\", {\n            className: `mbti-button ${group.color} ${selectedType === type ? 'selected' : ''}`,\n            onClick: () => handleTypeClick(type),\n            children: type\n          }, type, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 17\n          }, this))\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"traits\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: `trait-button ${selectedTrait === 'Assertive' ? 'selected' : ''}`,\n          onClick: () => handleTraitClick('Assertive'),\n          children: \"Assertive\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `trait-button ${selectedTrait === 'Turbulent' ? 'selected' : ''}`,\n          onClick: () => handleTraitClick('Turbulent'),\n          children: \"Turbulent\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"avatar-and-name-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"avatar-display\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: avatarPath,\n          alt: \"Avatar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Name your virtual friend\",\n        className: \"friend-name-input\",\n        value: virtualFriendName,\n        onChange: e => setVirtualFriendName(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n}\n_s(CreateFriend, \"NiPqWly/9gBtWpLzNpJEI/kzN/Q=\");\n_c = CreateFriend;\nexport default CreateFriend;\nvar _c;\n$RefreshReg$(_c, \"CreateFriend\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","mbtiTypes","types","color","CreateFriend","_s","selectedType","setSelectedType","selectedTrait","setSelectedTrait","virtualFriendName","setVirtualFriendName","handleTypeClick","type","handleTraitClick","trait","avatarPath","className","children","map","group","index","onClick","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","placeholder","value","onChange","e","target","_c","$RefreshReg$"],"sources":["/Users/ricky/Desktop/virtual-friends/src/components/CreateFriend.js"],"sourcesContent":["// CreateFriend.js\nimport React, { useState } from 'react';\nimport './CreateFriend.css'; // Make sure to create and link this CSS file\n\n// Define the MBTI types and their corresponding button colors\nconst mbtiTypes = [\n  { types: ['INTJ', 'INTP', 'ENTJ', 'ENTP'], color: 'lightpurple' },\n  { types: ['INFJ', 'INFP', 'ENFJ', 'ENFP'], color: 'lightgreen' },\n  { types: ['ISTJ', 'ISFJ', 'ESTJ', 'ESFJ'], color: 'lightyellow' },\n  { types: ['ISTP', 'ISFP', 'ESTP', 'ESFP'], color: 'lightblue' },\n];\n\nfunction CreateFriend() {\n  // State hooks for selected type, trait, and virtual friend's name\n  const [selectedType, setSelectedType] = useState(null);\n  const [selectedTrait, setSelectedTrait] = useState('');\n  const [virtualFriendName, setVirtualFriendName] = useState('');\n\n  // Function to handle MBTI type button click\n  const handleTypeClick = (type) => {\n    setSelectedType(type);\n    // Reset the friend's name and trait whenever a new type is selected\n    setVirtualFriendName('');\n    setSelectedTrait('');\n  };\n\n  // Function to handle trait button click\n  const handleTraitClick = (trait) => {\n    setSelectedTrait(trait);\n    // Reset the friend's name whenever a new trait is selected\n    setVirtualFriendName('');\n  };\n\n  // Construct the path for the avatar image\n  const avatarPath = selectedType && selectedTrait\n    ? `/avatars/${selectedType}-${selectedTrait}.png`\n    : '/avatars/default-avatar.png'; // A default placeholder image\n\n  return (\n    <div className=\"create-friend-container\">\n      <div className=\"selection-container\">\n        {/* MBTI type selection */}\n        <div className=\"mbti-types\">\n          {mbtiTypes.map((group, index) => (\n            <div key={index} className=\"mbti-row\">\n              {group.types.map((type) => (\n                <button\n                  key={type}\n                  className={`mbti-button ${group.color} ${selectedType === type ? 'selected' : ''}`}\n                  onClick={() => handleTypeClick(type)}\n                >\n                  {type}\n                </button>\n              ))}\n            </div>\n          ))}\n        </div>\n        {/* Trait selection */}\n        <div className=\"traits\">\n          <button \n            className={`trait-button ${selectedTrait === 'Assertive' ? 'selected' : ''}`}\n            onClick={() => handleTraitClick('Assertive')}\n          >\n            Assertive\n          </button>\n          <button \n            className={`trait-button ${selectedTrait === 'Turbulent' ? 'selected' : ''}`}\n            onClick={() => handleTraitClick('Turbulent')}\n          >\n            Turbulent\n          </button>\n        </div>\n      </div>\n\n      {/* Avatar and name input section */}\n      <div className=\"avatar-and-name-container\">\n        <div className=\"avatar-display\">\n          {/* Display the avatar image based on the selected type and trait */}\n          <img src={avatarPath} alt=\"Avatar\" />\n        </div>\n        <input \n          type=\"text\" \n          placeholder=\"Name your virtual friend\" \n          className=\"friend-name-input\"\n          value={virtualFriendName}\n          onChange={(e) => setVirtualFriendName(e.target.value)}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default CreateFriend;\n\n\n\n\n\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}