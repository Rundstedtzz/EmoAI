{"ast":null,"code":"var _jsxFileName = \"/Users/yuningwu/Documents/EmoAI-frontend/src/chatbot_components/Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { getChatbotResponse } from './ChatbotAPI'; // Make sure to implement getChatbotResponse\nimport Header from '../chatbot_components/Header';\nimport Messages from '../chatbot_components/Messages';\nimport Input from '../chatbot_components/Input';\nimport '../chatbot_components/styles.css';\nimport { useLocation } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Chatbot() {\n  _s();\n  const location = useLocation();\n  const [messages, setMessages] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const {\n    selectedType,\n    selectedTrait,\n    virtualFriendName,\n    customPrompt\n  } = location.state || {};\n\n  // URLs for avatars from the public/avatars folder or a suitable path\n  const userAvatarUrl = '/avatars/userAvatar.png'; // Update with the actual path\n  const botAvatarUrl = '/avatars/botAvatar.png'; // Update with the actual path\n\n  // Fetch the initial welcome message from the bot\n  useEffect(() => {\n    async function fetchWelcomeMessage() {\n      setIsLoading(true);\n      const welcomeMessage = await getChatbotResponse(''); // Fetch welcome message\n      setMessages(prevMessages => [...prevMessages, {\n        type: 'bot',\n        text: welcomeMessage,\n        avatar: botAvatarUrl\n      }]);\n      setIsLoading(false);\n    }\n    fetchWelcomeMessage();\n  }, []);\n  const sendMessage = async text => {\n    if (!text.trim()) return; // Prevent sending empty messages\n\n    // Append the user message to the chat\n    const userMessage = {\n      type: 'user',\n      text,\n      avatar: userAvatarUrl\n    };\n    setMessages(prevMessages => [...prevMessages, userMessage]);\n    setIsLoading(true);\n    const response = await getChatbotResponse(text); // Fetch the bot response\n    // Append the bot message to the chat\n    setMessages(prevMessages => [...prevMessages, {\n      type: 'bot',\n      text: response,\n      avatar: botAvatarUrl\n    }]);\n    setIsLoading(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Chatbot Page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Type: \", selectedType]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Trait: \", selectedTrait]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Friend's Name: \", virtualFriendName]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Custom Prompt: \", customPrompt]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n  // return (\n  //   <div className=\"chatbot-container\">\n  //     <Header />\n  //     <Messages \n  //       messages={messages}\n  //       userAvatar={userAvatarUrl}\n  //       botAvatar={botAvatarUrl}\n  //     />\n  //     <Input onSend={sendMessage} />\n  //   </div>\n  // );\n}\n_s(Chatbot, \"PguUPLAPWvWzIobzJAO1NgehlUY=\", false, function () {\n  return [useLocation];\n});\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useEffect","getChatbotResponse","Header","Messages","Input","useLocation","jsxDEV","_jsxDEV","Chatbot","_s","location","messages","setMessages","isLoading","setIsLoading","selectedType","selectedTrait","virtualFriendName","customPrompt","state","userAvatarUrl","botAvatarUrl","fetchWelcomeMessage","welcomeMessage","prevMessages","type","text","avatar","sendMessage","trim","userMessage","response","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/yuningwu/Documents/EmoAI-frontend/src/chatbot_components/Chatbot.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { getChatbotResponse } from './ChatbotAPI'; // Make sure to implement getChatbotResponse\nimport Header from '../chatbot_components/Header';\nimport Messages from '../chatbot_components/Messages';\nimport Input from '../chatbot_components/Input';\nimport '../chatbot_components/styles.css';\nimport { useLocation } from 'react-router-dom';\n\n\nfunction Chatbot() {\n  const location = useLocation();\n  const [messages, setMessages] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const { selectedType, selectedTrait, virtualFriendName, customPrompt } = location.state || {};\n\n  // URLs for avatars from the public/avatars folder or a suitable path\n  const userAvatarUrl = '/avatars/userAvatar.png'; // Update with the actual path\n  const botAvatarUrl = '/avatars/botAvatar.png'; // Update with the actual path\n  \n\n  // Fetch the initial welcome message from the bot\n  useEffect(() => {\n    async function fetchWelcomeMessage() {\n      setIsLoading(true);\n      const welcomeMessage = await getChatbotResponse(''); // Fetch welcome message\n      setMessages(prevMessages => [...prevMessages, { type: 'bot', text: welcomeMessage, avatar: botAvatarUrl }]);\n      setIsLoading(false);\n    }\n\n    fetchWelcomeMessage();\n  }, []);\n\n  const sendMessage = async (text) => {\n    if (!text.trim()) return; // Prevent sending empty messages\n\n    // Append the user message to the chat\n    const userMessage = { type: 'user', text, avatar: userAvatarUrl };\n    setMessages(prevMessages => [...prevMessages, userMessage]);\n    \n    setIsLoading(true);\n\n    const response = await getChatbotResponse(text); // Fetch the bot response\n    // Append the bot message to the chat\n    setMessages(prevMessages => [...prevMessages, { type: 'bot', text: response, avatar: botAvatarUrl }]);\n    \n    setIsLoading(false);\n  };\n  return (\n    <div>\n        <h1>Chatbot Page</h1>\n        {/* Example usage of the passed state */}\n        <p>Type: {selectedType}</p>\n        <p>Trait: {selectedTrait}</p>\n        <p>Friend's Name: {virtualFriendName}</p>\n        <p>Custom Prompt: {customPrompt}</p>\n\n        {/* Your chatbot UI goes here */}\n    </div>\n  );\n  // return (\n  //   <div className=\"chatbot-container\">\n  //     <Header />\n  //     <Messages \n  //       messages={messages}\n  //       userAvatar={userAvatarUrl}\n  //       botAvatar={botAvatarUrl}\n  //     />\n  //     <Input onSend={sendMessage} />\n  //   </div>\n  // );\n}\n\nexport default Chatbot;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}