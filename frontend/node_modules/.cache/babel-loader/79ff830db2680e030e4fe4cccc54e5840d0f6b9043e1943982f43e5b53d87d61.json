{"ast":null,"code":"// Chatbot.js\n// import React, { useState, useEffect } from 'react';\n// import { getChatbotResponse } from './ChatbotAPI'; // Make sure to implement getChatbotResponse\n// import Header from '../chatbot_components/Header';\n// import Messages from '../chatbot_components/Messages';\n// import Input from '../chatbot_components/Input';\n// // You may choose to import a Loader if you wish to show a loading state\n// import '../chatbot_components/styles.css';\n\n// function Chatbot() {\n//   const [messages, setMessages] = useState([]);\n//   const [isLoading, setIsLoading] = useState(false);\n\n//   // URLs for avatars from the public/avatars folder or a suitable path\n//   const userAvatarUrl = '/avatars/userAvatar.png'; // Update with the actual path\n//   const botAvatarUrl = '/avatars/botAvatar.png'; // Update with the actual path\n\n//   // Fetch the initial welcome message from the bot\n//   useEffect(() => {\n//     async function fetchWelcomeMessage() {\n//       setIsLoading(true);\n//       const welcomeMessage = await getChatbotResponse(''); // Fetch welcome message\n//       setMessages(prevMessages => [...prevMessages, { type: 'bot', text: welcomeMessage, avatar: botAvatarUrl }]);\n//       setIsLoading(false);\n//     }\n\n//     fetchWelcomeMessage();\n//   }, []);\n\n//   const sendMessage = async (text) => {\n//     if (!text.trim()) return; // Prevent sending empty messages\n\n//     // Append the user message to the chat\n//     const userMessage = { type: 'user', text, avatar: userAvatarUrl };\n//     setMessages(prevMessages => [...prevMessages, userMessage]);\n\n//     setIsLoading(true);\n\n//     const response = await getChatbotResponse(text); // Fetch the bot response\n//     // Append the bot message to the chat\n//     setMessages(prevMessages => [...prevMessages, { type: 'bot', text: response, avatar: botAvatarUrl }]);\n\n//     setIsLoading(false);\n//   };\n\n//   return (\n//     <div className=\"chatbot-container\">\n//       <Header />\n//       <Messages \n//         messages={messages}\n//         userAvatar={userAvatarUrl}\n//         botAvatar={botAvatarUrl}\n//       />\n//       {/* Uncomment Loader below if you have a Loader component */}\n//       {/* {isLoading && <Loader />} */}\n//       <Input onSend={sendMessage} />\n//     </div>\n//   );\n// }\n\n// export default Chatbot;\n\n// import React, { useState, useEffect } from 'react';\n// import Header from '../chatbot_components/Header';\n// import Messages from '../chatbot_components/Messages';\n// import Input from '../chatbot_components/Input';\n// import '../chatbot_components/styles.css';\n\n// function Chatbot(props) {\n//   const [messages, setMessages] = useState([]);\n//   const [isLoading, setIsLoading] = useState(false);\n\n//   const userAvatarUrl = '/avatars/userAvatar.png';\n//   const botAvatarUrl = '/avatars/botAvatar.png';\n\n//   useEffect(() => {\n//     // Fetch the initial welcome message here if needed\n//   }, []);\n\n//   const sendMessage = async (text) => {\n//     if (!text.trim()) return;\n\n//     const userMessage = { type: 'user', text, avatar: userAvatarUrl };\n//     setMessages(prevMessages => [...prevMessages, userMessage]);\n\n//     setIsLoading(true);\n\n//     // Construct the payload\n//     const payload = {\n//         message: text,\n//         friend_mbti: props.selectedType // Assuming the MBTI type is passed as a prop\n//     };\n\n//     try {\n//       const response = await fetch('/chat/chat_response/', {\n//           method: 'POST',\n//           headers: {\n//               'Content-Type': 'application/json',\n//           },\n//           body: JSON.stringify(payload),\n//       });\n\n//       if (!response.ok) {\n//         throw new Error(`HTTP error! Status: ${response.status}`);\n//       }\n\n//       const data = await response.json();\n//       setMessages(prevMessages => [...prevMessages, { type: 'bot', text: data.message, avatar: botAvatarUrl }]);\n//     } catch (error) {\n//       console.error('Error:', error);\n//       // Handle the error appropriately in the UI\n//     } finally {\n//       setIsLoading(false);\n//     }\n//   };\n\n//   return (\n//     <div className=\"chatbot-container\">\n//       <Header />\n//       <Messages \n//         messages={messages}\n//         userAvatar={userAvatarUrl}\n//         botAvatar={botAvatarUrl}\n//       />\n//       {/* Uncomment Loader below if you have a Loader component */}\n//       {/* {isLoading && <Loader />} */}\n//       <Input onSend={sendMessage} />\n//     </div>\n//   );\n// }\n\n// export default Chatbot;","map":{"version":3,"names":[],"sources":["/Users/yuningwu/Documents/EmoAI-frontend/src/chatbot_components/Chatbot.js"],"sourcesContent":["// Chatbot.js\n// import React, { useState, useEffect } from 'react';\n// import { getChatbotResponse } from './ChatbotAPI'; // Make sure to implement getChatbotResponse\n// import Header from '../chatbot_components/Header';\n// import Messages from '../chatbot_components/Messages';\n// import Input from '../chatbot_components/Input';\n// // You may choose to import a Loader if you wish to show a loading state\n// import '../chatbot_components/styles.css';\n\n// function Chatbot() {\n//   const [messages, setMessages] = useState([]);\n//   const [isLoading, setIsLoading] = useState(false);\n\n//   // URLs for avatars from the public/avatars folder or a suitable path\n//   const userAvatarUrl = '/avatars/userAvatar.png'; // Update with the actual path\n//   const botAvatarUrl = '/avatars/botAvatar.png'; // Update with the actual path\n\n//   // Fetch the initial welcome message from the bot\n//   useEffect(() => {\n//     async function fetchWelcomeMessage() {\n//       setIsLoading(true);\n//       const welcomeMessage = await getChatbotResponse(''); // Fetch welcome message\n//       setMessages(prevMessages => [...prevMessages, { type: 'bot', text: welcomeMessage, avatar: botAvatarUrl }]);\n//       setIsLoading(false);\n//     }\n\n//     fetchWelcomeMessage();\n//   }, []);\n\n//   const sendMessage = async (text) => {\n//     if (!text.trim()) return; // Prevent sending empty messages\n\n//     // Append the user message to the chat\n//     const userMessage = { type: 'user', text, avatar: userAvatarUrl };\n//     setMessages(prevMessages => [...prevMessages, userMessage]);\n    \n//     setIsLoading(true);\n\n//     const response = await getChatbotResponse(text); // Fetch the bot response\n//     // Append the bot message to the chat\n//     setMessages(prevMessages => [...prevMessages, { type: 'bot', text: response, avatar: botAvatarUrl }]);\n    \n//     setIsLoading(false);\n//   };\n\n//   return (\n//     <div className=\"chatbot-container\">\n//       <Header />\n//       <Messages \n//         messages={messages}\n//         userAvatar={userAvatarUrl}\n//         botAvatar={botAvatarUrl}\n//       />\n//       {/* Uncomment Loader below if you have a Loader component */}\n//       {/* {isLoading && <Loader />} */}\n//       <Input onSend={sendMessage} />\n//     </div>\n//   );\n// }\n\n// export default Chatbot;\n\n\n// import React, { useState, useEffect } from 'react';\n// import Header from '../chatbot_components/Header';\n// import Messages from '../chatbot_components/Messages';\n// import Input from '../chatbot_components/Input';\n// import '../chatbot_components/styles.css';\n\n// function Chatbot(props) {\n//   const [messages, setMessages] = useState([]);\n//   const [isLoading, setIsLoading] = useState(false);\n\n//   const userAvatarUrl = '/avatars/userAvatar.png';\n//   const botAvatarUrl = '/avatars/botAvatar.png';\n\n//   useEffect(() => {\n//     // Fetch the initial welcome message here if needed\n//   }, []);\n\n//   const sendMessage = async (text) => {\n//     if (!text.trim()) return;\n\n//     const userMessage = { type: 'user', text, avatar: userAvatarUrl };\n//     setMessages(prevMessages => [...prevMessages, userMessage]);\n    \n//     setIsLoading(true);\n\n//     // Construct the payload\n//     const payload = {\n//         message: text,\n//         friend_mbti: props.selectedType // Assuming the MBTI type is passed as a prop\n//     };\n\n//     try {\n//       const response = await fetch('/chat/chat_response/', {\n//           method: 'POST',\n//           headers: {\n//               'Content-Type': 'application/json',\n//           },\n//           body: JSON.stringify(payload),\n//       });\n\n//       if (!response.ok) {\n//         throw new Error(`HTTP error! Status: ${response.status}`);\n//       }\n\n//       const data = await response.json();\n//       setMessages(prevMessages => [...prevMessages, { type: 'bot', text: data.message, avatar: botAvatarUrl }]);\n//     } catch (error) {\n//       console.error('Error:', error);\n//       // Handle the error appropriately in the UI\n//     } finally {\n//       setIsLoading(false);\n//     }\n//   };\n\n//   return (\n//     <div className=\"chatbot-container\">\n//       <Header />\n//       <Messages \n//         messages={messages}\n//         userAvatar={userAvatarUrl}\n//         botAvatar={botAvatarUrl}\n//       />\n//       {/* Uncomment Loader below if you have a Loader component */}\n//       {/* {isLoading && <Loader />} */}\n//       <Input onSend={sendMessage} />\n//     </div>\n//   );\n// }\n\n// export default Chatbot;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}