{"ast":null,"code":"var _jsxFileName = \"/Users/yuningwu/Documents/EmoAI-frontend/src/components/CreateFriend.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport './CreateFriend.css';\n\n// Define the MBTI types and their corresponding button colors\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst mbtiTypes = [{\n  types: ['INTJ', 'INTP', 'ENTJ', 'ENTP'],\n  color: 'lightpurple'\n}, {\n  types: ['INFJ', 'INFP', 'ENFJ', 'ENFP'],\n  color: 'lightgreen'\n}, {\n  types: ['ISTJ', 'ISFJ', 'ESTJ', 'ESFJ'],\n  color: 'lightyellow'\n}, {\n  types: ['ISTP', 'ISFP', 'ESTP', 'ESFP'],\n  color: 'lightblue'\n}];\nfunction CreateFriend() {\n  _s();\n  // ... existing state variables ...\n  const [selectedType, setSelectedType] = useState(null);\n  const [selectedTrait, setSelectedTrait] = useState('');\n  const [virtualFriendName, setVirtualFriendName] = useState('');\n  const [customPrompt, setCustomPrompt] = useState(''); // State for custom prompt\n  const [isReadyToChat, setIsReadyToChat] = useState(false);\n  const navigate = useNavigate(); // Hook to navigate programmatically\n  const [avatarUrl, setAvatarUrl] = useState('/avatars/default-avatar.png'); // Initialize with default avatar path\n  const username = localStorage.getItem('username');\n  const [isLoading, setIsLoading] = useState(false);\n\n  // ... other existing code ...\n\n  useEffect(() => {\n    setIsReadyToChat(!!(selectedType && selectedTrait && virtualFriendName.trim()));\n    // Update the avatar URL when a new type or trait is selected\n    if (selectedType && selectedTrait) {\n      setAvatarUrl(`/avatars/${selectedType}-${selectedTrait}.png`);\n    } else {\n      setAvatarUrl('/avatars/default-avatar.png');\n    }\n  }, [selectedType, selectedTrait, virtualFriendName]);\n\n  // ... existing handler functions ...\n  const handleTypeClick = type => {\n    setSelectedType(type);\n    setVirtualFriendName('');\n    setSelectedTrait('');\n    setCustomPrompt('');\n  };\n  const handleTraitClick = trait => {\n    setSelectedTrait(trait);\n    setVirtualFriendName('');\n    setCustomPrompt('');\n  };\n  const handleGenerateAvatar = async () => {\n    setIsLoading(true);\n    try {\n      const response = await fetch('http://localhost:8000/virtualfriend/generate-avatar/', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          friendName: virtualFriendName,\n          username: username,\n          customPrompt: customPrompt\n        })\n      });\n      if (response.ok) {\n        const data = await response.json();\n        const newAvatarUrl = `http://localhost:8000/media/${data.image_path}`;\n        setAvatarUrl(newAvatarUrl);\n        // setAvatarUrl(data.image_path); // Update the avatarUrl state with the new path\n        console.log(\"data.image_path\", data.image_path);\n      } else {\n        console.error('Failed to generate avatar');\n      }\n    } catch (error) {\n      console.error('Error:', error);\n    }\n    setIsLoading(false);\n  };\n  // const startChat = () => {\n  //   // Navigate to the chatbot page with state\n  //   navigate('/chatbot', { state: { selectedType, selectedTrait, virtualFriendName, customPrompt, avatarUrl} });\n  // };\n\n  const createVirtualFriend = async () => {\n    try {\n      const response = await fetch('http://localhost:8000/virtualfriend/create/', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          username: username,\n          // assuming you have the username in the state or from localStorage\n          friend_name: virtualFriendName,\n          friend_mbti: selectedType,\n          friend_mbti_variant: selectedTrait,\n          friend_custom_prompt: customPrompt,\n          friend_avatar: avatarUrl\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Failed to create virtual friend');\n      }\n      return await response.json(); // You can use the response data as needed\n    } catch (error) {\n      console.error('Error creating virtual friend:', error);\n    }\n  };\n  const startChat = async () => {\n    await createVirtualFriend(); // Create the virtual friend\n\n    // Navigate to the chatbot page with state\n    navigate('/chatbot', {\n      state: {\n        selectedType,\n        selectedTrait,\n        virtualFriendName,\n        customPrompt,\n        avatarUrl\n      }\n    });\n  };\n\n  // Conditional rendering for avatar path\n  const avatarPath = selectedType && selectedTrait ? `/avatars/${selectedType}-${selectedTrait}.png` : '/avatars/default-avatar.png';\n\n  // ... existing JSX ...\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"create-friend-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"selection-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mbti-types\",\n        children: mbtiTypes.map((group, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mbti-row\",\n          children: group.types.map(type => /*#__PURE__*/_jsxDEV(\"button\", {\n            className: `mbti-button ${group.color} ${selectedType === type ? 'selected' : ''}`,\n            onClick: () => handleTypeClick(type),\n            children: type\n          }, type, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 19\n          }, this))\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"traits\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: `trait-button ${selectedTrait === 'Assertive' ? 'selected' : ''}`,\n          onClick: () => handleTraitClick('Assertive'),\n          children: \"Assertive\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `trait-button ${selectedTrait === 'Turbulent' ? 'selected' : ''}`,\n          onClick: () => handleTraitClick('Turbulent'),\n          children: \"Turbulent\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"avatar-and-name-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"avatar-display\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: avatarUrl,\n          alt: \"Avatar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Name your virtual friend\",\n        className: \"friend-name-input\",\n        value: virtualFriendName,\n        onChange: e => setVirtualFriendName(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        placeholder: \"Customize your virtual friend\",\n        className: \"custom-prompt-input\",\n        value: customPrompt,\n        onChange: e => setCustomPrompt(e.target.value),\n        rows: 10 // You can adjust the number of rows as needed\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 16\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"generate-avatar-button\",\n        onClick: handleGenerateAvatar,\n        children: \"Generate Virtual Friend Avatar with DALL-E 3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 15\n      }, this), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 29\n      }, this), \" \", isReadyToChat && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"start-chat-button\",\n        onClick: startChat,\n        children: \"Start Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 19\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 7\n  }, this);\n}\n_s(CreateFriend, \"K4kldfUgdRBbiakIVN95W1mU9MA=\", false, function () {\n  return [useNavigate];\n});\n_c = CreateFriend;\nexport default CreateFriend;\n\n// import React, { useState, useEffect } from 'react';\n// import { useNavigate } from 'react-router-dom';\n// import './CreateFriend.css';\n\n// // Define the MBTI types and their corresponding button colors\n// const mbtiTypes = [\n//   { types: ['INTJ', 'INTP', 'ENTJ', 'ENTP'], color: 'lightpurple' },\n//   { types: ['INFJ', 'INFP', 'ENFJ', 'ENFP'], color: 'lightgreen' },\n//   { types: ['ISTJ', 'ISFJ', 'ESTJ', 'ESFJ'], color: 'lightyellow' },\n//   { types: ['ISTP', 'ISFP', 'ESTP', 'ESFP'], color: 'lightblue' },\n// ];\n\n// function CreateFriend() {\n//   // ... existing state variables ...\n//     const [selectedType, setSelectedType] = useState(null);\n//     const [selectedTrait, setSelectedTrait] = useState('');\n//     const [virtualFriendName, setVirtualFriendName] = useState('');\n//     const [isReadyToChat, setIsReadyToChat] = useState(false);\n//     const navigate = useNavigate(); // Hook to navigate programmatically\n//     const [avatarUrl, setAvatarUrl] = useState('/avatars/default-avatar.png'); // Initialize with default avatar path\n//     const username = localStorage.getItem('username');\n\n//   // ... other existing code ...\n\n//     useEffect(() => {\n//       setIsReadyToChat(!!(selectedType && selectedTrait && virtualFriendName.trim()));\n//     }, [selectedType, selectedTrait, virtualFriendName]);\n\n//   // ... existing handler functions ...\n//     const handleTypeClick = (type) => {\n//     setSelectedType(type);\n//     setVirtualFriendName('');\n//     setSelectedTrait('');\n//     };\n\n//     const handleTraitClick = (trait) => {\n//       setSelectedTrait(trait);\n//       setVirtualFriendName('');\n//     };\n\n//     const handleGenerateAvatar = async () => {\n//         try {\n//             const response = await fetch('http://localhost:8000/virtualfriend/generate-avatar/', {\n//                 method: 'POST',\n//                 headers: {\n//                     'Content-Type': 'application/json',\n//                 },\n//                 body: JSON.stringify({\n//                     friendName: virtualFriendName,\n//                     username: username\n//                 }),\n//             });\n//             if (response.ok) {\n//                 const data = await response.json();\n//                 const newAvatarUrl = `http://localhost:8000/media/${data.image_path}`; \n//                 setAvatarUrl(newAvatarUrl); \n//                 // setAvatarUrl(data.image_path); // Update the avatarUrl state with the new path\n//                 console.log(\"data.image_path\", data.image_path);\n//             } else {\n//                 console.error('Failed to generate avatar');\n//             }\n//         } catch (error) {\n//             console.error('Error:', error);\n//         }\n//     };\n//     const startChat = () => {\n//       // Navigate to the chatbot page with state\n//       navigate('/chatbot', { state: { selectedType, selectedTrait, virtualFriendName } });\n//     };\n\n//     // Conditional rendering for avatar path\n//     const avatarPath = selectedType && selectedTrait\n//       ? `/avatars/${selectedType}-${selectedTrait}.png`\n//       : '/avatars/default-avatar.png';\n\n//   // ... existing JSX ...\n\n//     return (\n//       <div className=\"create-friend-container\">\n//         <div className=\"selection-container\">\n//           <div className=\"mbti-types\">\n//             {mbtiTypes.map((group, index) => (\n//               <div key={index} className=\"mbti-row\">\n//                 {group.types.map((type) => (\n//                   <button\n//                     key={type}\n//                     className={`mbti-button ${group.color} ${selectedType === type ? 'selected' : ''}`}\n//                     onClick={() => handleTypeClick(type)}\n//                   >\n//                     {type}\n//                   </button>\n//                 ))}\n//               </div>\n//             ))}\n//           </div>\n//           <div className=\"traits\">\n//             <button \n//               className={`trait-button ${selectedTrait === 'Assertive' ? 'selected' : ''}`}\n//               onClick={() => handleTraitClick('Assertive')}\n//             >\n//               Assertive\n//             </button>\n//             <button \n//               className={`trait-button ${selectedTrait === 'Turbulent' ? 'selected' : ''}`}\n//               onClick={() => handleTraitClick('Turbulent')}\n//             >\n//               Turbulent\n//             </button>\n//           </div>\n//         </div>\n//         <div className=\"avatar-and-name-container\">\n//           <div className=\"avatar-display\">\n//               <img src={avatarUrl} alt=\"Avatar\" /> \n//               </div>\n//               <input \n//                   type=\"text\"\n//                   placeholder=\"Name your virtual friend\"\n//                   className=\"friend-name-input\"\n//                   value={virtualFriendName}\n//                   onChange={(e) => setVirtualFriendName(e.target.value)}\n//               />\n//               <button className=\"generate-avatar-button\" onClick={handleGenerateAvatar}>\n//                   Generate Virtual Friend Avatar with DALL-E 3\n//               </button>\n//               {isReadyToChat && (\n//                   <button className=\"start-chat-button\" onClick={startChat}>\n//                       Start Chat\n//                   </button>\n//               )}\n//         </div>\n//       </div>\n//     );\n//   }\n\n// export default CreateFriend;\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n// import React, { useState, useEffect } from 'react';\n// import { useNavigate } from 'react-router-dom'; // Import useNavigate from react-router-dom\n// import './CreateFriend.css'; // Make sure to link the correct CSS file\n\n// // Define the MBTI types and their corresponding button colors\n// const mbtiTypes = [\n//   { types: ['INTJ', 'INTP', 'ENTJ', 'ENTP'], color: 'lightpurple' },\n//   { types: ['INFJ', 'INFP', 'ENFJ', 'ENFP'], color: 'lightgreen' },\n//   { types: ['ISTJ', 'ISFJ', 'ESTJ', 'ESFJ'], color: 'lightyellow' },\n//   { types: ['ISTP', 'ISFP', 'ESTP', 'ESFP'], color: 'lightblue' },\n// ];\n\n// function CreateFriend() {\n//   const [selectedType, setSelectedType] = useState(null);\n//   const [selectedTrait, setSelectedTrait] = useState('');\n//   const [virtualFriendName, setVirtualFriendName] = useState('');\n//   const [isReadyToChat, setIsReadyToChat] = useState(false);\n//   const navigate = useNavigate(); // Hook to navigate programmatically\n\n//   useEffect(() => {\n//     // Update the isReadyToChat state based on the current selections\n//     setIsReadyToChat(!!(selectedType && selectedTrait && virtualFriendName.trim()));\n//   }, [selectedType, selectedTrait, virtualFriendName]);\n\n//   const handleTypeClick = (type) => {\n//     setSelectedType(type);\n//     setVirtualFriendName('');\n//     setSelectedTrait('');\n//   };\n\n//   const handleTraitClick = (trait) => {\n//     setSelectedTrait(trait);\n//     setVirtualFriendName('');\n//   };\n\n//   const startChat = () => {\n//     // Navigate to the chatbot page with state\n//     navigate('/chatbot', { state: { selectedType, selectedTrait, virtualFriendName } });\n//   };\n\n//   // Conditional rendering for avatar path\n//   const avatarPath = selectedType && selectedTrait\n//     ? `/avatars/${selectedType}-${selectedTrait}.png`\n//     : '/avatars/default-avatar.png';\n\n//   return (\n//     <div className=\"create-friend-container\">\n//       <div className=\"selection-container\">\n//         <div className=\"mbti-types\">\n//           {mbtiTypes.map((group, index) => (\n//             <div key={index} className=\"mbti-row\">\n//               {group.types.map((type) => (\n//                 <button\n//                   key={type}\n//                   className={`mbti-button ${group.color} ${selectedType === type ? 'selected' : ''}`}\n//                   onClick={() => handleTypeClick(type)}\n//                 >\n//                   {type}\n//                 </button>\n//               ))}\n//             </div>\n//           ))}\n//         </div>\n//         <div className=\"traits\">\n//           <button \n//             className={`trait-button ${selectedTrait === 'Assertive' ? 'selected' : ''}`}\n//             onClick={() => handleTraitClick('Assertive')}\n//           >\n//             Assertive\n//           </button>\n//           <button \n//             className={`trait-button ${selectedTrait === 'Turbulent' ? 'selected' : ''}`}\n//             onClick={() => handleTraitClick('Turbulent')}\n//           >\n//             Turbulent\n//           </button>\n//         </div>\n//       </div>\n//       <div className=\"avatar-and-name-container\">\n//         <div className=\"avatar-display\">\n//           <img src={avatarPath} alt=\"Avatar\" />\n//         </div>\n//         <input \n//           type=\"text\" \n//           placeholder=\"Name your virtual friend\" \n//           className=\"friend-name-input\"\n//           value={virtualFriendName}\n//           onChange={(e) => setVirtualFriendName(e.target.value)}\n//         />\n//         {isReadyToChat && (\n//           <button className=\"start-chat-button\" onClick={startChat}>\n//             Start Chat\n//           </button>\n//         )}\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default CreateFriend;\n\n// function CreateFriend() {\n//     // ... existing state variables ...\n//     const [selectedType, setSelectedType] = useState(null);\n//     const [selectedTrait, setSelectedTrait] = useState('');\n//     const [virtualFriendName, setVirtualFriendName] = useState('');\n//     const [isReadyToChat, setIsReadyToChat] = useState(false);\n//     const navigate = useNavigate(); // Hook to navigate programmatically\n//     const [avatarUrl, setAvatarUrl] = useState(''); // State to store the generated avatar URL\n//     const username = localStorage.getItem('username');\n//     // console.log(\"username\", username);\n\n//     useEffect(() => {\n//         setIsReadyToChat(!!(selectedType && selectedTrait && virtualFriendName.trim()));\n//     }, [selectedType, selectedTrait, virtualFriendName]);\n\n//     // ... existing handler functions ...\n//     const handleTypeClick = (type) => {\n//       setSelectedType(type);\n//       setVirtualFriendName('');\n//       setSelectedTrait('');\n//     };\n\n//     const handleTraitClick = (trait) => {\n//       setSelectedTrait(trait);\n//       setVirtualFriendName('');\n//     };\n\n//     const handleGenerateAvatar = async () => {\n//         try {\n//             const response = await fetch('http://localhost:8000/virtualfriend/generate-avatar/', {\n//                 method: 'POST',\n//                 headers: {\n//                     'Content-Type': 'application/json',\n//                 },\n//                 body: JSON.stringify({\n\n//                     friendName: virtualFriendName,\n//                     username: username// Add other required data if necessary\n//                 }),\n//             });\n//             if (response.ok) {\n//                 const data = await response.json();\n//                 setAvatarUrl(data.image_path); // Update the state with the new avatar URL\n//             } else {\n//                 console.error('Failed to generate avatar');\n//             }\n//         } catch (error) {\n//             console.error('Error:', error);\n//         }\n//     };\n//     const startChat = () => {\n//       // Navigate to the chatbot page with state\n//       navigate('/chatbot', { state: { selectedType, selectedTrait, virtualFriendName } });\n//     };\n\n//     // Conditional rendering for avatar path\n//     const avatarPath = selectedType && selectedTrait\n//       ? `/avatars/${selectedType}-${selectedTrait}.png`\n//       : '/avatars/default-avatar.png';\n\n//     // ... existing JSX ...\n\n//     return (\n//       <div className=\"create-friend-container\">\n//         <div className=\"selection-container\">\n//           <div className=\"mbti-types\">\n//             {mbtiTypes.map((group, index) => (\n//               <div key={index} className=\"mbti-row\">\n//                 {group.types.map((type) => (\n//                   <button\n//                     key={type}\n//                     className={`mbti-button ${group.color} ${selectedType === type ? 'selected' : ''}`}\n//                     onClick={() => handleTypeClick(type)}\n//                   >\n//                     {type}\n//                   </button>\n//                 ))}\n//               </div>\n//             ))}\n//           </div>\n//           <div className=\"traits\">\n//             <button \n//               className={`trait-button ${selectedTrait === 'Assertive' ? 'selected' : ''}`}\n//               onClick={() => handleTraitClick('Assertive')}\n//             >\n//               Assertive\n//             </button>\n//             <button \n//               className={`trait-button ${selectedTrait === 'Turbulent' ? 'selected' : ''}`}\n//               onClick={() => handleTraitClick('Turbulent')}\n//             >\n//               Turbulent\n//             </button>\n//           </div>\n//         </div>\n//         <div className=\"avatar-and-name-container\">\n//           <div className=\"avatar-display\">\n//               <img src={avatarUrl || avatarPath} alt=\"Avatar\" />\n//               </div>\n//               <input \n//                   type=\"text\"\n//                   placeholder=\"Name your virtual friend\"\n//                   className=\"friend-name-input\"\n//                   value={virtualFriendName}\n//                   onChange={(e) => setVirtualFriendName(e.target.value)}\n//               />\n//               <button className=\"generate-avatar-button\" onClick={handleGenerateAvatar}>\n//                   Generate Virtual Friend Avatar with DALL-E 3\n//               </button>\n//               {isReadyToChat && (\n//                   <button className=\"start-chat-button\" onClick={startChat}>\n//                       Start Chat\n//                   </button>\n//               )}\n//         </div>\n//       </div>\n//     );\n//   }\n\n// export default CreateFriend;\n// <div className=\"create-friend-container\">\n//     {/* ... existing JSX ... */}\n//     <div className=\"avatar-and-name-container\">\n//         <div className=\"avatar-display\">\n//             <img src={avatarUrl || avatarPath} alt=\"Avatar\" />\n//         </div>\n//         <input \n//             type=\"text\"\n//             placeholder=\"Name your virtual friend\"\n//             className=\"friend-name-input\"\n//             value={virtualFriendName}\n//             onChange={(e) => setVirtualFriendName(e.target.value)}\n//         />\n//         <button className=\"generate-avatar-button\" onClick={handleGenerateAvatar}>\n//             Generate Virtual Friend Avatar with DALL-E 3\n//         </button>\n//         {isReadyToChat && (\n//             <button className=\"start-chat-button\" onClick={startChat}>\n//                 Start Chat\n//             </button>\n//         )}\n//     </div>\n// </div>\n// );\nvar _c;\n$RefreshReg$(_c, \"CreateFriend\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","jsxDEV","_jsxDEV","mbtiTypes","types","color","CreateFriend","_s","selectedType","setSelectedType","selectedTrait","setSelectedTrait","virtualFriendName","setVirtualFriendName","customPrompt","setCustomPrompt","isReadyToChat","setIsReadyToChat","navigate","avatarUrl","setAvatarUrl","username","localStorage","getItem","isLoading","setIsLoading","trim","handleTypeClick","type","handleTraitClick","trait","handleGenerateAvatar","response","fetch","method","headers","body","JSON","stringify","friendName","ok","data","json","newAvatarUrl","image_path","console","log","error","createVirtualFriend","friend_name","friend_mbti","friend_mbti_variant","friend_custom_prompt","friend_avatar","Error","startChat","state","avatarPath","className","children","map","group","index","onClick","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","placeholder","value","onChange","e","target","rows","_c","$RefreshReg$"],"sources":["/Users/yuningwu/Documents/EmoAI-frontend/src/components/CreateFriend.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport './CreateFriend.css';\n\n// Define the MBTI types and their corresponding button colors\nconst mbtiTypes = [\n  { types: ['INTJ', 'INTP', 'ENTJ', 'ENTP'], color: 'lightpurple' },\n  { types: ['INFJ', 'INFP', 'ENFJ', 'ENFP'], color: 'lightgreen' },\n  { types: ['ISTJ', 'ISFJ', 'ESTJ', 'ESFJ'], color: 'lightyellow' },\n  { types: ['ISTP', 'ISFP', 'ESTP', 'ESFP'], color: 'lightblue' },\n];\n\nfunction CreateFriend() {\n  // ... existing state variables ...\n    const [selectedType, setSelectedType] = useState(null);\n    const [selectedTrait, setSelectedTrait] = useState('');\n    const [virtualFriendName, setVirtualFriendName] = useState('');\n    const [customPrompt, setCustomPrompt] = useState(''); // State for custom prompt\n    const [isReadyToChat, setIsReadyToChat] = useState(false);\n    const navigate = useNavigate(); // Hook to navigate programmatically\n    const [avatarUrl, setAvatarUrl] = useState('/avatars/default-avatar.png'); // Initialize with default avatar path\n    const username = localStorage.getItem('username');\n    const [isLoading, setIsLoading] = useState(false);\n\n  // ... other existing code ...\n\n\n  useEffect(() => {\n    setIsReadyToChat(!!(selectedType && selectedTrait && virtualFriendName.trim()));\n    // Update the avatar URL when a new type or trait is selected\n    if (selectedType && selectedTrait) {\n      setAvatarUrl(`/avatars/${selectedType}-${selectedTrait}.png`);\n    } else {\n      setAvatarUrl('/avatars/default-avatar.png');\n    }\n  }, [selectedType, selectedTrait, virtualFriendName]);\n\n  // ... existing handler functions ...\n    const handleTypeClick = (type) => {\n    setSelectedType(type);\n    setVirtualFriendName('');\n    setSelectedTrait('');\n    setCustomPrompt('');\n    };\n\n    const handleTraitClick = (trait) => {\n      setSelectedTrait(trait);\n      setVirtualFriendName('');\n      setCustomPrompt('');\n    };\n\n    const handleGenerateAvatar = async () => {\n        setIsLoading(true);\n        try {\n            const response = await fetch('http://localhost:8000/virtualfriend/generate-avatar/', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    friendName: virtualFriendName,\n                    username: username,\n                    customPrompt: customPrompt\n                }),\n            });\n            if (response.ok) {\n                const data = await response.json();\n                const newAvatarUrl = `http://localhost:8000/media/${data.image_path}`; \n                setAvatarUrl(newAvatarUrl); \n                // setAvatarUrl(data.image_path); // Update the avatarUrl state with the new path\n                console.log(\"data.image_path\", data.image_path);\n            } else {\n                console.error('Failed to generate avatar');\n            }\n        } catch (error) {\n            console.error('Error:', error);\n        }\n        setIsLoading(false);\n    };\n    // const startChat = () => {\n    //   // Navigate to the chatbot page with state\n    //   navigate('/chatbot', { state: { selectedType, selectedTrait, virtualFriendName, customPrompt, avatarUrl} });\n    // };\n\n    const createVirtualFriend = async () => {\n      try {\n        const response = await fetch('http://localhost:8000/virtualfriend/create/', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            username: username, // assuming you have the username in the state or from localStorage\n            friend_name: virtualFriendName,\n            friend_mbti: selectedType,\n            friend_mbti_variant: selectedTrait,\n            friend_custom_prompt: customPrompt,\n            friend_avatar: avatarUrl,\n          }),\n        });\n    \n        if (!response.ok) {\n          throw new Error('Failed to create virtual friend');\n        }\n    \n        return await response.json(); // You can use the response data as needed\n      } catch (error) {\n        console.error('Error creating virtual friend:', error);\n      }\n    };\n    \n\n    const startChat = async () => {\n      await createVirtualFriend(); // Create the virtual friend\n    \n      // Navigate to the chatbot page with state\n      navigate('/chatbot', { \n        state: { \n          selectedType, \n          selectedTrait, \n          virtualFriendName, \n          customPrompt, \n          avatarUrl \n        } \n      });\n    };\n    \n  \n    // Conditional rendering for avatar path\n    const avatarPath = selectedType && selectedTrait\n      ? `/avatars/${selectedType}-${selectedTrait}.png`\n      : '/avatars/default-avatar.png';\n\n  // ... existing JSX ...\n\n    return (\n      <div className=\"create-friend-container\">\n        <div className=\"selection-container\">\n          <div className=\"mbti-types\">\n            {mbtiTypes.map((group, index) => (\n              <div key={index} className=\"mbti-row\">\n                {group.types.map((type) => (\n                  <button\n                    key={type}\n                    className={`mbti-button ${group.color} ${selectedType === type ? 'selected' : ''}`}\n                    onClick={() => handleTypeClick(type)}\n                  >\n                    {type}\n                  </button>\n                ))}\n              </div>\n            ))}\n          </div>\n          <div className=\"traits\">\n            <button \n              className={`trait-button ${selectedTrait === 'Assertive' ? 'selected' : ''}`}\n              onClick={() => handleTraitClick('Assertive')}\n            >\n              Assertive\n            </button>\n            <button \n              className={`trait-button ${selectedTrait === 'Turbulent' ? 'selected' : ''}`}\n              onClick={() => handleTraitClick('Turbulent')}\n            >\n              Turbulent\n            </button>\n          </div>\n        </div>\n        <div className=\"avatar-and-name-container\">\n          <div className=\"avatar-display\">\n              <img src={avatarUrl} alt=\"Avatar\" /> \n              </div>\n              <input \n                  type=\"text\"\n                  placeholder=\"Name your virtual friend\"\n                  className=\"friend-name-input\"\n                  value={virtualFriendName}\n                  onChange={(e) => setVirtualFriendName(e.target.value)}\n              />\n               <textarea\n                  placeholder=\"Customize your virtual friend\"\n                  className=\"custom-prompt-input\"\n                  value={customPrompt}\n                  onChange={(e) => setCustomPrompt(e.target.value)}\n                  rows={10} // You can adjust the number of rows as needed\n              />\n              <button className=\"generate-avatar-button\" onClick={handleGenerateAvatar}>\n                  Generate Virtual Friend Avatar with DALL-E 3\n              </button>\n              {isLoading && <div>Loading...</div>} {/* Loading indicator */}\n              {isReadyToChat && (\n                  <button className=\"start-chat-button\" onClick={startChat}>\n                      Start Chat\n                  </button>\n              )}\n        </div>\n      </div>\n    );\n  }\n\nexport default CreateFriend;\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import React, { useState, useEffect } from 'react';\n// import { useNavigate } from 'react-router-dom';\n// import './CreateFriend.css';\n\n// // Define the MBTI types and their corresponding button colors\n// const mbtiTypes = [\n//   { types: ['INTJ', 'INTP', 'ENTJ', 'ENTP'], color: 'lightpurple' },\n//   { types: ['INFJ', 'INFP', 'ENFJ', 'ENFP'], color: 'lightgreen' },\n//   { types: ['ISTJ', 'ISFJ', 'ESTJ', 'ESFJ'], color: 'lightyellow' },\n//   { types: ['ISTP', 'ISFP', 'ESTP', 'ESFP'], color: 'lightblue' },\n// ];\n\n// function CreateFriend() {\n//   // ... existing state variables ...\n//     const [selectedType, setSelectedType] = useState(null);\n//     const [selectedTrait, setSelectedTrait] = useState('');\n//     const [virtualFriendName, setVirtualFriendName] = useState('');\n//     const [isReadyToChat, setIsReadyToChat] = useState(false);\n//     const navigate = useNavigate(); // Hook to navigate programmatically\n//     const [avatarUrl, setAvatarUrl] = useState('/avatars/default-avatar.png'); // Initialize with default avatar path\n//     const username = localStorage.getItem('username');\n\n//   // ... other existing code ...\n\n\n//     useEffect(() => {\n//       setIsReadyToChat(!!(selectedType && selectedTrait && virtualFriendName.trim()));\n//     }, [selectedType, selectedTrait, virtualFriendName]);\n\n//   // ... existing handler functions ...\n//     const handleTypeClick = (type) => {\n//     setSelectedType(type);\n//     setVirtualFriendName('');\n//     setSelectedTrait('');\n//     };\n\n//     const handleTraitClick = (trait) => {\n//       setSelectedTrait(trait);\n//       setVirtualFriendName('');\n//     };\n\n//     const handleGenerateAvatar = async () => {\n//         try {\n//             const response = await fetch('http://localhost:8000/virtualfriend/generate-avatar/', {\n//                 method: 'POST',\n//                 headers: {\n//                     'Content-Type': 'application/json',\n//                 },\n//                 body: JSON.stringify({\n//                     friendName: virtualFriendName,\n//                     username: username\n//                 }),\n//             });\n//             if (response.ok) {\n//                 const data = await response.json();\n//                 const newAvatarUrl = `http://localhost:8000/media/${data.image_path}`; \n//                 setAvatarUrl(newAvatarUrl); \n//                 // setAvatarUrl(data.image_path); // Update the avatarUrl state with the new path\n//                 console.log(\"data.image_path\", data.image_path);\n//             } else {\n//                 console.error('Failed to generate avatar');\n//             }\n//         } catch (error) {\n//             console.error('Error:', error);\n//         }\n//     };\n//     const startChat = () => {\n//       // Navigate to the chatbot page with state\n//       navigate('/chatbot', { state: { selectedType, selectedTrait, virtualFriendName } });\n//     };\n  \n//     // Conditional rendering for avatar path\n//     const avatarPath = selectedType && selectedTrait\n//       ? `/avatars/${selectedType}-${selectedTrait}.png`\n//       : '/avatars/default-avatar.png';\n\n//   // ... existing JSX ...\n\n//     return (\n//       <div className=\"create-friend-container\">\n//         <div className=\"selection-container\">\n//           <div className=\"mbti-types\">\n//             {mbtiTypes.map((group, index) => (\n//               <div key={index} className=\"mbti-row\">\n//                 {group.types.map((type) => (\n//                   <button\n//                     key={type}\n//                     className={`mbti-button ${group.color} ${selectedType === type ? 'selected' : ''}`}\n//                     onClick={() => handleTypeClick(type)}\n//                   >\n//                     {type}\n//                   </button>\n//                 ))}\n//               </div>\n//             ))}\n//           </div>\n//           <div className=\"traits\">\n//             <button \n//               className={`trait-button ${selectedTrait === 'Assertive' ? 'selected' : ''}`}\n//               onClick={() => handleTraitClick('Assertive')}\n//             >\n//               Assertive\n//             </button>\n//             <button \n//               className={`trait-button ${selectedTrait === 'Turbulent' ? 'selected' : ''}`}\n//               onClick={() => handleTraitClick('Turbulent')}\n//             >\n//               Turbulent\n//             </button>\n//           </div>\n//         </div>\n//         <div className=\"avatar-and-name-container\">\n//           <div className=\"avatar-display\">\n//               <img src={avatarUrl} alt=\"Avatar\" /> \n//               </div>\n//               <input \n//                   type=\"text\"\n//                   placeholder=\"Name your virtual friend\"\n//                   className=\"friend-name-input\"\n//                   value={virtualFriendName}\n//                   onChange={(e) => setVirtualFriendName(e.target.value)}\n//               />\n//               <button className=\"generate-avatar-button\" onClick={handleGenerateAvatar}>\n//                   Generate Virtual Friend Avatar with DALL-E 3\n//               </button>\n//               {isReadyToChat && (\n//                   <button className=\"start-chat-button\" onClick={startChat}>\n//                       Start Chat\n//                   </button>\n//               )}\n//         </div>\n//       </div>\n//     );\n//   }\n\n// export default CreateFriend;\n\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n// import React, { useState, useEffect } from 'react';\n// import { useNavigate } from 'react-router-dom'; // Import useNavigate from react-router-dom\n// import './CreateFriend.css'; // Make sure to link the correct CSS file\n\n// // Define the MBTI types and their corresponding button colors\n// const mbtiTypes = [\n//   { types: ['INTJ', 'INTP', 'ENTJ', 'ENTP'], color: 'lightpurple' },\n//   { types: ['INFJ', 'INFP', 'ENFJ', 'ENFP'], color: 'lightgreen' },\n//   { types: ['ISTJ', 'ISFJ', 'ESTJ', 'ESFJ'], color: 'lightyellow' },\n//   { types: ['ISTP', 'ISFP', 'ESTP', 'ESFP'], color: 'lightblue' },\n// ];\n\n// function CreateFriend() {\n//   const [selectedType, setSelectedType] = useState(null);\n//   const [selectedTrait, setSelectedTrait] = useState('');\n//   const [virtualFriendName, setVirtualFriendName] = useState('');\n//   const [isReadyToChat, setIsReadyToChat] = useState(false);\n//   const navigate = useNavigate(); // Hook to navigate programmatically\n\n//   useEffect(() => {\n//     // Update the isReadyToChat state based on the current selections\n//     setIsReadyToChat(!!(selectedType && selectedTrait && virtualFriendName.trim()));\n//   }, [selectedType, selectedTrait, virtualFriendName]);\n\n//   const handleTypeClick = (type) => {\n//     setSelectedType(type);\n//     setVirtualFriendName('');\n//     setSelectedTrait('');\n//   };\n\n//   const handleTraitClick = (trait) => {\n//     setSelectedTrait(trait);\n//     setVirtualFriendName('');\n//   };\n\n//   const startChat = () => {\n//     // Navigate to the chatbot page with state\n//     navigate('/chatbot', { state: { selectedType, selectedTrait, virtualFriendName } });\n//   };\n\n//   // Conditional rendering for avatar path\n//   const avatarPath = selectedType && selectedTrait\n//     ? `/avatars/${selectedType}-${selectedTrait}.png`\n//     : '/avatars/default-avatar.png';\n\n//   return (\n//     <div className=\"create-friend-container\">\n//       <div className=\"selection-container\">\n//         <div className=\"mbti-types\">\n//           {mbtiTypes.map((group, index) => (\n//             <div key={index} className=\"mbti-row\">\n//               {group.types.map((type) => (\n//                 <button\n//                   key={type}\n//                   className={`mbti-button ${group.color} ${selectedType === type ? 'selected' : ''}`}\n//                   onClick={() => handleTypeClick(type)}\n//                 >\n//                   {type}\n//                 </button>\n//               ))}\n//             </div>\n//           ))}\n//         </div>\n//         <div className=\"traits\">\n//           <button \n//             className={`trait-button ${selectedTrait === 'Assertive' ? 'selected' : ''}`}\n//             onClick={() => handleTraitClick('Assertive')}\n//           >\n//             Assertive\n//           </button>\n//           <button \n//             className={`trait-button ${selectedTrait === 'Turbulent' ? 'selected' : ''}`}\n//             onClick={() => handleTraitClick('Turbulent')}\n//           >\n//             Turbulent\n//           </button>\n//         </div>\n//       </div>\n//       <div className=\"avatar-and-name-container\">\n//         <div className=\"avatar-display\">\n//           <img src={avatarPath} alt=\"Avatar\" />\n//         </div>\n//         <input \n//           type=\"text\" \n//           placeholder=\"Name your virtual friend\" \n//           className=\"friend-name-input\"\n//           value={virtualFriendName}\n//           onChange={(e) => setVirtualFriendName(e.target.value)}\n//         />\n//         {isReadyToChat && (\n//           <button className=\"start-chat-button\" onClick={startChat}>\n//             Start Chat\n//           </button>\n//         )}\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default CreateFriend;\n\n\n// function CreateFriend() {\n//     // ... existing state variables ...\n//     const [selectedType, setSelectedType] = useState(null);\n//     const [selectedTrait, setSelectedTrait] = useState('');\n//     const [virtualFriendName, setVirtualFriendName] = useState('');\n//     const [isReadyToChat, setIsReadyToChat] = useState(false);\n//     const navigate = useNavigate(); // Hook to navigate programmatically\n//     const [avatarUrl, setAvatarUrl] = useState(''); // State to store the generated avatar URL\n//     const username = localStorage.getItem('username');\n//     // console.log(\"username\", username);\n\n\n//     useEffect(() => {\n//         setIsReadyToChat(!!(selectedType && selectedTrait && virtualFriendName.trim()));\n//     }, [selectedType, selectedTrait, virtualFriendName]);\n\n//     // ... existing handler functions ...\n//     const handleTypeClick = (type) => {\n//       setSelectedType(type);\n//       setVirtualFriendName('');\n//       setSelectedTrait('');\n//     };\n  \n//     const handleTraitClick = (trait) => {\n//       setSelectedTrait(trait);\n//       setVirtualFriendName('');\n//     };\n  \n//     const handleGenerateAvatar = async () => {\n//         try {\n//             const response = await fetch('http://localhost:8000/virtualfriend/generate-avatar/', {\n//                 method: 'POST',\n//                 headers: {\n//                     'Content-Type': 'application/json',\n//                 },\n//                 body: JSON.stringify({\n\n//                     friendName: virtualFriendName,\n//                     username: username// Add other required data if necessary\n//                 }),\n//             });\n//             if (response.ok) {\n//                 const data = await response.json();\n//                 setAvatarUrl(data.image_path); // Update the state with the new avatar URL\n//             } else {\n//                 console.error('Failed to generate avatar');\n//             }\n//         } catch (error) {\n//             console.error('Error:', error);\n//         }\n//     };\n//     const startChat = () => {\n//       // Navigate to the chatbot page with state\n//       navigate('/chatbot', { state: { selectedType, selectedTrait, virtualFriendName } });\n//     };\n  \n//     // Conditional rendering for avatar path\n//     const avatarPath = selectedType && selectedTrait\n//       ? `/avatars/${selectedType}-${selectedTrait}.png`\n//       : '/avatars/default-avatar.png';\n\n//     // ... existing JSX ...\n\n//     return (\n//       <div className=\"create-friend-container\">\n//         <div className=\"selection-container\">\n//           <div className=\"mbti-types\">\n//             {mbtiTypes.map((group, index) => (\n//               <div key={index} className=\"mbti-row\">\n//                 {group.types.map((type) => (\n//                   <button\n//                     key={type}\n//                     className={`mbti-button ${group.color} ${selectedType === type ? 'selected' : ''}`}\n//                     onClick={() => handleTypeClick(type)}\n//                   >\n//                     {type}\n//                   </button>\n//                 ))}\n//               </div>\n//             ))}\n//           </div>\n//           <div className=\"traits\">\n//             <button \n//               className={`trait-button ${selectedTrait === 'Assertive' ? 'selected' : ''}`}\n//               onClick={() => handleTraitClick('Assertive')}\n//             >\n//               Assertive\n//             </button>\n//             <button \n//               className={`trait-button ${selectedTrait === 'Turbulent' ? 'selected' : ''}`}\n//               onClick={() => handleTraitClick('Turbulent')}\n//             >\n//               Turbulent\n//             </button>\n//           </div>\n//         </div>\n//         <div className=\"avatar-and-name-container\">\n//           <div className=\"avatar-display\">\n//               <img src={avatarUrl || avatarPath} alt=\"Avatar\" />\n//               </div>\n//               <input \n//                   type=\"text\"\n//                   placeholder=\"Name your virtual friend\"\n//                   className=\"friend-name-input\"\n//                   value={virtualFriendName}\n//                   onChange={(e) => setVirtualFriendName(e.target.value)}\n//               />\n//               <button className=\"generate-avatar-button\" onClick={handleGenerateAvatar}>\n//                   Generate Virtual Friend Avatar with DALL-E 3\n//               </button>\n//               {isReadyToChat && (\n//                   <button className=\"start-chat-button\" onClick={startChat}>\n//                       Start Chat\n//                   </button>\n//               )}\n//         </div>\n//       </div>\n//     );\n//   }\n\n// export default CreateFriend;\n        // <div className=\"create-friend-container\">\n        //     {/* ... existing JSX ... */}\n        //     <div className=\"avatar-and-name-container\">\n        //         <div className=\"avatar-display\">\n        //             <img src={avatarUrl || avatarPath} alt=\"Avatar\" />\n        //         </div>\n        //         <input \n        //             type=\"text\"\n        //             placeholder=\"Name your virtual friend\"\n        //             className=\"friend-name-input\"\n        //             value={virtualFriendName}\n        //             onChange={(e) => setVirtualFriendName(e.target.value)}\n        //         />\n        //         <button className=\"generate-avatar-button\" onClick={handleGenerateAvatar}>\n        //             Generate Virtual Friend Avatar with DALL-E 3\n        //         </button>\n        //         {isReadyToChat && (\n        //             <button className=\"start-chat-button\" onClick={startChat}>\n        //                 Start Chat\n        //             </button>\n        //         )}\n        //     </div>\n        // </div>\n    // );\n"],"mappings":"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A;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAAC5D,EAAA,CA1LMD,YAAY;EAAA,QAOAN,WAAW;AAAA;AAAA4E,EAAA,GAPvBtE,YAAY;AA4LrB,eAAeA,YAAY;;AAc3B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACQ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACJ;AAAA,IAAAsE,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}