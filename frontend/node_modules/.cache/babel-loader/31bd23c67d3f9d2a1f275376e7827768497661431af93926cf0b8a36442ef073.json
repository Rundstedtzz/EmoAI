{"ast":null,"code":"export const getChatbotResponse = async (message, selectedType, selectedTrait, virtualFriendName, customPrompt, selectedModel) => {\n  try {\n    const response = await fetch('http://localhost:8000/chat/chat_response/', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n        // Include other headers as required, e.g., Authorization if needed\n      },\n      body: JSON.stringify({\n        message,\n        selectedType,\n        selectedTrait,\n        virtualFriendName,\n        customPrompt,\n        selectedModel\n      })\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n    return data.message;\n  } catch (error) {\n    console.error('Could not get chatbot response:', error);\n    return \"Sorry, I couldn't understand that.\";\n  }\n};\nexport default {\n  getChatbotResponse\n};","map":{"version":3,"names":["getChatbotResponse","message","selectedType","selectedTrait","virtualFriendName","customPrompt","selectedModel","response","fetch","method","headers","body","JSON","stringify","ok","Error","status","data","json","error","console"],"sources":["/Users/yuningwu/Documents/EmoAI-frontend/src/chatbot_components/ChatbotAPI.js"],"sourcesContent":["export const getChatbotResponse = async (message, selectedType, selectedTrait, virtualFriendName, customPrompt, selectedModel) => {\n  try {\n    const response = await fetch('http://localhost:8000/chat/chat_response/', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        // Include other headers as required, e.g., Authorization if needed\n      },\n      body: JSON.stringify({ \n        message,\n        selectedType,\n        selectedTrait,\n        virtualFriendName,\n        customPrompt,\n        selectedModel}),\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n    return data.message;\n  } catch (error) {\n    console.error('Could not get chatbot response:', error);\n    return \"Sorry, I couldn't understand that.\";\n  }\n};\n\nexport default { getChatbotResponse };\n\n\n\n"],"mappings":"AAAA,OAAO,MAAMA,kBAAkB,GAAG,MAAAA,CAAOC,OAAO,EAAEC,YAAY,EAAEC,aAAa,EAAEC,iBAAiB,EAAEC,YAAY,EAAEC,aAAa,KAAK;EAChI,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,2CAA2C,EAAE;MACxEC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;QAChB;MACF,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBZ,OAAO;QACPC,YAAY;QACZC,aAAa;QACbC,iBAAiB;QACjBC,YAAY;QACZC;MAAa,CAAC;IAClB,CAAC,CAAC;IACF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAE,uBAAsBR,QAAQ,CAACS,MAAO,EAAC,CAAC;IAC3D;IACA,MAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI,CAAChB,OAAO;EACrB,CAAC,CAAC,OAAOkB,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;IACvD,OAAO,oCAAoC;EAC7C;AACF,CAAC;AAED,eAAe;EAAEnB;AAAmB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}