{"ast":null,"code":"var _jsxFileName = \"/Users/yuningwu/Documents/EmoAI-frontend/src/components/CreateFriend.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom'; // Import useNavigate from react-router-dom\nimport './CreateFriend.css'; // Make sure to link the correct CSS file\n\n// Define the MBTI types and their corresponding button colors\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst mbtiTypes = [{\n  types: ['INTJ', 'INTP', 'ENTJ', 'ENTP'],\n  color: 'lightpurple'\n}, {\n  types: ['INFJ', 'INFP', 'ENFJ', 'ENFP'],\n  color: 'lightgreen'\n}, {\n  types: ['ISTJ', 'ISFJ', 'ESTJ', 'ESFJ'],\n  color: 'lightyellow'\n}, {\n  types: ['ISTP', 'ISFP', 'ESTP', 'ESFP'],\n  color: 'lightblue'\n}];\nfunction CreateFriend() {\n  _s();\n  const [selectedType, setSelectedType] = useState(null);\n  const [selectedTrait, setSelectedTrait] = useState('');\n  const [virtualFriendName, setVirtualFriendName] = useState('');\n  const [isReadyToChat, setIsReadyToChat] = useState(false);\n  const navigate = useNavigate(); // Hook to navigate programmatically\n\n  useEffect(() => {\n    // Update the isReadyToChat state based on the current selections\n    setIsReadyToChat(!!(selectedType && selectedTrait && virtualFriendName.trim()));\n  }, [selectedType, selectedTrait, virtualFriendName]);\n  const handleTypeClick = type => {\n    setSelectedType(type);\n    setVirtualFriendName('');\n    setSelectedTrait('');\n  };\n  const handleTraitClick = trait => {\n    setSelectedTrait(trait);\n    setVirtualFriendName('');\n  };\n  const startChat = () => {\n    // Navigate to the chatbot page with state\n    navigate('/chatbot', {\n      state: {\n        selectedType,\n        selectedTrait,\n        virtualFriendName\n      }\n    });\n  };\n\n  // Conditional rendering for avatar path\n  const avatarPath = selectedType && selectedTrait ? `/avatars/${selectedType}-${selectedTrait}.png` : '/avatars/default-avatar.png';\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"create-friend-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"selection-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mbti-types\",\n        children: mbtiTypes.map((group, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mbti-row\",\n          children: group.types.map(type => /*#__PURE__*/_jsxDEV(\"button\", {\n            className: `mbti-button ${group.color} ${selectedType === type ? 'selected' : ''}`,\n            onClick: () => handleTypeClick(type),\n            children: type\n          }, type, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 17\n          }, this))\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"traits\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: `trait-button ${selectedTrait === 'Assertive' ? 'selected' : ''}`,\n          onClick: () => handleTraitClick('Assertive'),\n          children: \"Assertive\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `trait-button ${selectedTrait === 'Turbulent' ? 'selected' : ''}`,\n          onClick: () => handleTraitClick('Turbulent'),\n          children: \"Turbulent\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"avatar-and-name-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"avatar-display\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: avatarPath,\n          alt: \"Avatar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Name your virtual friend\",\n        className: \"friend-name-input\",\n        value: virtualFriendName,\n        onChange: e => setVirtualFriendName(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), isReadyToChat && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"start-chat-button\",\n        onClick: startChat,\n        children: \"Start Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n}\n_s(CreateFriend, \"7b9Pi3EbQfZouX2yBXjXHXsegTk=\", false, function () {\n  return [useNavigate];\n});\n_c = CreateFriend;\nexport default CreateFriend;\nvar _c;\n$RefreshReg$(_c, \"CreateFriend\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","jsxDEV","_jsxDEV","mbtiTypes","types","color","CreateFriend","_s","selectedType","setSelectedType","selectedTrait","setSelectedTrait","virtualFriendName","setVirtualFriendName","isReadyToChat","setIsReadyToChat","navigate","trim","handleTypeClick","type","handleTraitClick","trait","startChat","state","avatarPath","className","children","map","group","index","onClick","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","placeholder","value","onChange","e","target","_c","$RefreshReg$"],"sources":["/Users/yuningwu/Documents/EmoAI-frontend/src/components/CreateFriend.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom'; // Import useNavigate from react-router-dom\nimport './CreateFriend.css'; // Make sure to link the correct CSS file\n\n// Define the MBTI types and their corresponding button colors\nconst mbtiTypes = [\n  { types: ['INTJ', 'INTP', 'ENTJ', 'ENTP'], color: 'lightpurple' },\n  { types: ['INFJ', 'INFP', 'ENFJ', 'ENFP'], color: 'lightgreen' },\n  { types: ['ISTJ', 'ISFJ', 'ESTJ', 'ESFJ'], color: 'lightyellow' },\n  { types: ['ISTP', 'ISFP', 'ESTP', 'ESFP'], color: 'lightblue' },\n];\n\nfunction CreateFriend() {\n  const [selectedType, setSelectedType] = useState(null);\n  const [selectedTrait, setSelectedTrait] = useState('');\n  const [virtualFriendName, setVirtualFriendName] = useState('');\n  const [isReadyToChat, setIsReadyToChat] = useState(false);\n  const navigate = useNavigate(); // Hook to navigate programmatically\n\n  useEffect(() => {\n    // Update the isReadyToChat state based on the current selections\n    setIsReadyToChat(!!(selectedType && selectedTrait && virtualFriendName.trim()));\n  }, [selectedType, selectedTrait, virtualFriendName]);\n\n  const handleTypeClick = (type) => {\n    setSelectedType(type);\n    setVirtualFriendName('');\n    setSelectedTrait('');\n  };\n\n  const handleTraitClick = (trait) => {\n    setSelectedTrait(trait);\n    setVirtualFriendName('');\n  };\n\n  const startChat = () => {\n    // Navigate to the chatbot page with state\n    navigate('/chatbot', { state: { selectedType, selectedTrait, virtualFriendName } });\n  };\n\n  // Conditional rendering for avatar path\n  const avatarPath = selectedType && selectedTrait\n    ? `/avatars/${selectedType}-${selectedTrait}.png`\n    : '/avatars/default-avatar.png';\n\n  return (\n    <div className=\"create-friend-container\">\n      <div className=\"selection-container\">\n        <div className=\"mbti-types\">\n          {mbtiTypes.map((group, index) => (\n            <div key={index} className=\"mbti-row\">\n              {group.types.map((type) => (\n                <button\n                  key={type}\n                  className={`mbti-button ${group.color} ${selectedType === type ? 'selected' : ''}`}\n                  onClick={() => handleTypeClick(type)}\n                >\n                  {type}\n                </button>\n              ))}\n            </div>\n          ))}\n        </div>\n        <div className=\"traits\">\n          <button \n            className={`trait-button ${selectedTrait === 'Assertive' ? 'selected' : ''}`}\n            onClick={() => handleTraitClick('Assertive')}\n          >\n            Assertive\n          </button>\n          <button \n            className={`trait-button ${selectedTrait === 'Turbulent' ? 'selected' : ''}`}\n            onClick={() => handleTraitClick('Turbulent')}\n          >\n            Turbulent\n          </button>\n        </div>\n      </div>\n      <div className=\"avatar-and-name-container\">\n        <div className=\"avatar-display\">\n          <img src={avatarPath} alt=\"Avatar\" />\n        </div>\n        <input \n          type=\"text\" \n          placeholder=\"Name your virtual friend\" \n          className=\"friend-name-input\"\n          value={virtualFriendName}\n          onChange={(e) => setVirtualFriendName(e.target.value)}\n        />\n        {isReadyToChat && (\n          <button className=\"start-chat-button\" onClick={startChat}>\n            Start Chat\n          </button>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default CreateFriend;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}