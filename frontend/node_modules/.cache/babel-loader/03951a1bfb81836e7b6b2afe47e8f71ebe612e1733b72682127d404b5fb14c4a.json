{"ast":null,"code":"var _jsxFileName = \"/Users/yuningwu/Documents/EmoAI-frontend/src/chatbot_components/Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { getChatbotResponse } from './ChatbotAPI'; // Make sure to implement getChatbotResponse\nimport Header from '../chatbot_components/Header';\nimport Messages from '../chatbot_components/Messages';\nimport Input from '../chatbot_components/Input';\nimport '../chatbot_components/styles.css';\nimport { useLocation } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Chatbot() {\n  _s();\n  const location = useLocation();\n  const [messages, setMessages] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const {\n    selectedType,\n    selectedTrait,\n    virtualFriendName,\n    customPrompt,\n    avatarUrl\n  } = location.state || {};\n  const [selectedModel, setSelectedModel] = useState('gpt-4');\n  const [showModelSelection, setShowModelSelection] = useState(true);\n\n  // URLs for avatars from the public/avatars folder or a suitable path\n  const userAvatarUrl = '/avatars/userAvatar.png'; // Update with the actual path\n  // const botAvatarUrl = '/avatars/botAvatar.png'; // Update with the actual path\n  const botAvatarUrl = avatarUrl;\n  // Fetch the initial welcome message from the bot\n  useEffect(() => {\n    async function fetchWelcomeMessage() {\n      setIsLoading(true);\n      const welcomeMessage = await getChatbotResponse('', selectedType, selectedTrait, virtualFriendName, customPrompt, selectedModel); // Fetch welcome message\n      setMessages(prevMessages => [...prevMessages, {\n        type: 'bot',\n        text: welcomeMessage,\n        avatar: botAvatarUrl\n      }]);\n      setIsLoading(false);\n    }\n    fetchWelcomeMessage();\n  }, []);\n  const sendMessage = async text => {\n    if (!text.trim()) return; // Prevent sending empty messages\n\n    // Append the user message to the chat\n    const userMessage = {\n      type: 'user',\n      text,\n      avatar: userAvatarUrl\n    };\n    setMessages(prevMessages => [...prevMessages, userMessage]);\n    setIsLoading(true);\n    const response = await getChatbotResponse(text); // Fetch the bot response\n    // Append the bot message to the chat\n    setMessages(prevMessages => [...prevMessages, {\n      type: 'bot',\n      text: response,\n      avatar: botAvatarUrl\n    }]);\n    setIsLoading(false);\n  };\n\n  // return (\n  //   <div className=\"chatbot-container\">\n  //     <Header friendName={virtualFriendName} />\n  //     {/* <Header /> */}\n  //     <Messages \n  //       messages={messages}\n  //       userAvatar={userAvatarUrl}\n  //       botAvatar={botAvatarUrl}\n  //     />\n  //     <Input onSend={sendMessage} />\n  //   </div>\n  // );\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      friendName: virtualFriendName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), showModelSelection && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"model-selection\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setSelectedModel('gpt-3.5'),\n          children: \"Use GPT-3.5\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setSelectedModel('gpt-4'),\n          children: \"Use GPT-4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setShowModelSelection(false),\n        children: \"Confirm\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Messages, {\n      messages: messages,\n      userAvatar: userAvatarUrl,\n      botAvatar: botAvatarUrl\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Input, {\n      onSend: sendMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n}\n_s(Chatbot, \"wLeMNogK998ubVtjItxZIbY6PZI=\", false, function () {\n  return [useLocation];\n});\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useEffect","getChatbotResponse","Header","Messages","Input","useLocation","jsxDEV","_jsxDEV","Chatbot","_s","location","messages","setMessages","isLoading","setIsLoading","selectedType","selectedTrait","virtualFriendName","customPrompt","avatarUrl","state","selectedModel","setSelectedModel","showModelSelection","setShowModelSelection","userAvatarUrl","botAvatarUrl","fetchWelcomeMessage","welcomeMessage","prevMessages","type","text","avatar","sendMessage","trim","userMessage","response","className","children","friendName","fileName","_jsxFileName","lineNumber","columnNumber","onClick","userAvatar","botAvatar","onSend","_c","$RefreshReg$"],"sources":["/Users/yuningwu/Documents/EmoAI-frontend/src/chatbot_components/Chatbot.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { getChatbotResponse } from './ChatbotAPI'; // Make sure to implement getChatbotResponse\nimport Header from '../chatbot_components/Header';\nimport Messages from '../chatbot_components/Messages';\nimport Input from '../chatbot_components/Input';\nimport '../chatbot_components/styles.css';\nimport { useLocation } from 'react-router-dom';\n\n\nfunction Chatbot() {\n  const location = useLocation();\n  const [messages, setMessages] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const { selectedType, selectedTrait, virtualFriendName, customPrompt, avatarUrl} = location.state || {};\n  const [selectedModel, setSelectedModel] = useState('gpt-4');\n  const [showModelSelection, setShowModelSelection] = useState(true);\n\n\n  // URLs for avatars from the public/avatars folder or a suitable path\n  const userAvatarUrl = '/avatars/userAvatar.png'; // Update with the actual path\n  // const botAvatarUrl = '/avatars/botAvatar.png'; // Update with the actual path\n  const botAvatarUrl = avatarUrl;\n  // Fetch the initial welcome message from the bot\n  useEffect(() => {\n    async function fetchWelcomeMessage() {\n      setIsLoading(true);\n      const welcomeMessage = await getChatbotResponse('', selectedType, selectedTrait, virtualFriendName, customPrompt, selectedModel); // Fetch welcome message\n      setMessages(prevMessages => [...prevMessages, { type: 'bot', text: welcomeMessage, avatar: botAvatarUrl }]);\n      setIsLoading(false);\n    }\n\n    fetchWelcomeMessage();\n  }, []);\n\n  const sendMessage = async (text) => {\n    if (!text.trim()) return; // Prevent sending empty messages\n\n    // Append the user message to the chat\n    const userMessage = { type: 'user', text, avatar: userAvatarUrl };\n    setMessages(prevMessages => [...prevMessages, userMessage]);\n    \n    setIsLoading(true);\n\n    const response = await getChatbotResponse(text); // Fetch the bot response\n    // Append the bot message to the chat\n    setMessages(prevMessages => [...prevMessages, { type: 'bot', text: response, avatar: botAvatarUrl }]);\n    \n    setIsLoading(false);\n  };\n\n  // return (\n  //   <div className=\"chatbot-container\">\n  //     <Header friendName={virtualFriendName} />\n  //     {/* <Header /> */}\n  //     <Messages \n  //       messages={messages}\n  //       userAvatar={userAvatarUrl}\n  //       botAvatar={botAvatarUrl}\n  //     />\n  //     <Input onSend={sendMessage} />\n  //   </div>\n  // );\n  return (\n    <div className=\"chatbot-container\">\n      <Header friendName={virtualFriendName} />\n      \n      {showModelSelection && (\n        <div>\n          <div className=\"model-selection\">\n            <button onClick={() => setSelectedModel('gpt-3.5')}>Use GPT-3.5</button>\n            <button onClick={() => setSelectedModel('gpt-4')}>Use GPT-4</button>\n          </div>\n          <button onClick={() => setShowModelSelection(false)}>Confirm</button>\n        </div>\n      )}\n  \n      {/* Rest of your component */}\n      <Messages \n        messages={messages}\n        userAvatar={userAvatarUrl}\n        botAvatar={botAvatarUrl}\n      />\n      <Input onSend={sendMessage} />\n    </div>\n  );\n  \n}\n\nexport default Chatbot;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}