{"ast":null,"code":"var _jsxFileName = \"/Users/yuningwu/Documents/EmoAI-frontend/src/chatbot_components/Chatbot.js\",\n  _s = $RefreshSig$();\n// Chatbot.js good one\n// import React, { useState, useEffect } from 'react';\n// import { getChatbotResponse } from './ChatbotAPI'; // Make sure to implement getChatbotResponse\n// import Header from '../chatbot_components/Header';\n// import Messages from '../chatbot_components/Messages';\n// import Input from '../chatbot_components/Input';\n// // You may choose to import a Loader if you wish to show a loading state\n// import '../chatbot_components/styles.css';\n\n// function Chatbot() {\n//   const [messages, setMessages] = useState([]);\n//   const [isLoading, setIsLoading] = useState(false);\n\n//   // URLs for avatars from the public/avatars folder or a suitable path\n//   const userAvatarUrl = '/avatars/userAvatar.png'; // Update with the actual path\n//   const botAvatarUrl = '/avatars/botAvatar.png'; // Update with the actual path\n\n//   // Fetch the initial welcome message from the bot\n//   useEffect(() => {\n//     async function fetchWelcomeMessage() {\n//       setIsLoading(true);\n//       const welcomeMessage = await getChatbotResponse(''); // Fetch welcome message\n//       setMessages(prevMessages => [...prevMessages, { type: 'bot', text: welcomeMessage, avatar: botAvatarUrl }]);\n//       setIsLoading(false);\n//     }\n\n//     fetchWelcomeMessage();\n//   }, []);\n\n//   const sendMessage = async (text) => {\n//     if (!text.trim()) return; // Prevent sending empty messages\n\n//     // Append the user message to the chat\n//     const userMessage = { type: 'user', text, avatar: userAvatarUrl };\n//     setMessages(prevMessages => [...prevMessages, userMessage]);\n\n//     setIsLoading(true);\n\n//     const response = await getChatbotResponse(text); // Fetch the bot response\n//     // Append the bot message to the chat\n//     setMessages(prevMessages => [...prevMessages, { type: 'bot', text: response, avatar: botAvatarUrl }]);\n\n//     setIsLoading(false);\n//   };\n\n//   return (\n//     <div className=\"chatbot-container\">\n//       <Header />\n//       <Messages \n//         messages={messages}\n//         userAvatar={userAvatarUrl}\n//         botAvatar={botAvatarUrl}\n//       />\n//       {/* Uncomment Loader below if you have a Loader component */}\n//       {/* {isLoading && <Loader />} */}\n//       <Input onSend={sendMessage} />\n//     </div>\n//   );\n// }\n\n// export default Chatbot;\n\n// import React, { useState, useEffect } from 'react';\n// import Header from '../chatbot_components/Header';\n// import Messages from '../chatbot_components/Messages';\n// import Input from '../chatbot_components/Input';\n// import '../chatbot_components/styles.css';\n\n// function Chatbot(props) {\n//   const [messages, setMessages] = useState([]);\n//   const [isLoading, setIsLoading] = useState(false);\n\n//   const userAvatarUrl = '/avatars/userAvatar.png';\n//   const botAvatarUrl = '/avatars/botAvatar.png';\n\n//   useEffect(() => {\n//     // Fetch the initial welcome message here if needed\n//   }, []);\n\n//   const sendMessage = async (text) => {\n//     if (!text.trim()) return;\n\n//     const userMessage = { type: 'user', text, avatar: userAvatarUrl };\n//     setMessages(prevMessages => [...prevMessages, userMessage]);\n\n//     setIsLoading(true);\n\n//     // Construct the payload\n//     const payload = {\n//         message: text,\n//         friend_mbti: props.selectedType // Assuming the MBTI type is passed as a prop\n//     };\n\n//     try {\n//       const response = await fetch('/chat/chat_response/', {\n//           method: 'POST',\n//           headers: {\n//               'Content-Type': 'application/json',\n//           },\n//           body: JSON.stringify(payload),\n//       });\n\n//       if (!response.ok) {\n//         throw new Error(`HTTP error! Status: ${response.status}`);\n//       }\n\n//       const data = await response.json();\n//       setMessages(prevMessages => [...prevMessages, { type: 'bot', text: data.message, avatar: botAvatarUrl }]);\n//     } catch (error) {\n//       console.error('Error:', error);\n//       // Handle the error appropriately in the UI\n//     } finally {\n//       setIsLoading(false);\n//     }\n//   };\n\n//   return (\n//     <div className=\"chatbot-container\">\n//       <Header />\n//       <Messages \n//         messages={messages}\n//         userAvatar={userAvatarUrl}\n//         botAvatar={botAvatarUrl}\n//       />\n//       {/* Uncomment Loader below if you have a Loader component */}\n//       {/* {isLoading && <Loader />} */}\n//       <Input onSend={sendMessage} />\n//     </div>\n//   );\n// }\n\n// export default Chatbot;\n\n// // Chatbot.js\n// import React, { useState, useEffect } from 'react';\n// import { getChatbotResponse } from './ChatbotAPI'; // Make sure to implement getChatbotResponse\n// import Header from '../chatbot_components/Header';\n// import Messages from '../chatbot_components/Messages';\n// import Input from '../chatbot_components/Input';\n// // You may choose to import a Loader if you wish to show a loading state\n// import '../chatbot_components/styles.css';\n\n// function Chatbot(props) {\n//   const [messages, setMessages] = useState([]);\n//   const [isLoading, setIsLoading] = useState(false);\n\n//   // URLs for avatars from the public/avatars folder or a suitable path\n//   const userAvatarUrl = '/avatars/userAvatar.png'; // Update with the actual path\n//   const botAvatarUrl = '/avatars/botAvatar.png'; // Update with the actual path\n\n//   // Fetch the initial welcome message from the bot\n//   // useEffect(() => {\n//   //   async function fetchWelcomeMessage() {\n//   //     setIsLoading(true);\n//   //     const welcomeMessage = await getChatbotResponse(''); // Fetch welcome message\n//   //     setMessages(prevMessages => [...prevMessages, { type: 'bot', text: welcomeMessage, avatar: botAvatarUrl }]);\n//   //     setIsLoading(false);\n//   //   }\n\n//   //   fetchWelcomeMessage();\n//   // }, []);\n\n//   const sendMessage = async (text) => {\n//     if (!text.trim()) return;\n\n//     const userMessage = { type: 'user', text, avatar: userAvatarUrl };\n//     setMessages(prevMessages => [...prevMessages, userMessage]);\n\n//     setIsLoading(true);\n\n//     try {\n//       const responseText = await getChatbotResponse(text, props.selectedType);\n//       setMessages(prevMessages => [...prevMessages, { type: 'bot', text: responseText, avatar: botAvatarUrl }]);\n//     } catch (error) {\n//       console.error('Error:', error);\n//       // Handle the error appropriately in the UI\n//     } finally {\n//       setIsLoading(false);\n//     }\n//   };\n\n//   return (\n//     <div className=\"chatbot-container\">\n//       <Header />\n//       <Messages \n//         messages={messages}\n//         userAvatar={userAvatarUrl}\n//         botAvatar={botAvatarUrl}\n//       />\n//       {/* Uncomment Loader below if you have a Loader component */}\n//       {/* {isLoading && <Loader />} */}\n//       <Input onSend={sendMessage} />\n//     </div>\n//   );\n// }\n\n// export default Chatbot;\n\nimport React, { useState, useEffect } from 'react';\nimport { getChatbotResponse } from './ChatbotAPI'; // Make sure to implement getChatbotResponse\nimport { useLocation } from 'react-router-dom';\nimport Header from '../chatbot_components/Header';\nimport Messages from '../chatbot_components/Messages';\nimport Input from '../chatbot_components/Input';\n// You may choose to import a Loader if you wish to show a loading state\nimport '../chatbot_components/styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Chatbot() {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const location = useLocation();\n  const {\n    selectedType,\n    selectedTrait,\n    virtualFriendName\n  } = location.state || {};\n  console.log(\"selectedType:\", selectedType);\n\n  // URLs for avatars from the public/avatars folder or a suitable path\n  const userAvatarUrl = '/avatars/userAvatar.png'; // Update with the actual path\n  const botAvatarUrl = '/avatars/botAvatar.png'; // Update with the actual path\n\n  // Fetch the initial welcome message from the bot\n  useEffect(() => {\n    async function fetchWelcomeMessage() {\n      setIsLoading(true);\n      const welcomeMessage = await getChatbotResponse(''); // Fetch welcome message\n      setMessages(prevMessages => [...prevMessages, {\n        type: 'bot',\n        text: welcomeMessage,\n        avatar: botAvatarUrl\n      }]);\n      setIsLoading(false);\n    }\n    fetchWelcomeMessage();\n  }, []);\n\n  // In your Chatbot component in React\n  const sendMessage = async text => {\n    if (!text.trim()) return;\n    const payload = {\n      message: text,\n      selectedType: selectedType // Include the selectedType in the request body\n    };\n    try {\n      const response = await fetch('/chat/chat_response/', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(payload)\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      const data = await response.json();\n      // Process the response data...\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Messages, {\n      messages: messages,\n      userAvatar: userAvatarUrl,\n      botAvatar: botAvatarUrl\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Input, {\n      onSend: sendMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 267,\n    columnNumber: 5\n  }, this);\n}\n_s(Chatbot, \"bBwmDotEDM0gfnkQNE9yMS8/57s=\", false, function () {\n  return [useLocation];\n});\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useEffect","getChatbotResponse","useLocation","Header","Messages","Input","jsxDEV","_jsxDEV","Chatbot","_s","messages","setMessages","isLoading","setIsLoading","location","selectedType","selectedTrait","virtualFriendName","state","console","log","userAvatarUrl","botAvatarUrl","fetchWelcomeMessage","welcomeMessage","prevMessages","type","text","avatar","sendMessage","trim","payload","message","response","fetch","method","headers","body","JSON","stringify","ok","Error","status","data","json","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","userAvatar","botAvatar","onSend","_c","$RefreshReg$"],"sources":["/Users/yuningwu/Documents/EmoAI-frontend/src/chatbot_components/Chatbot.js"],"sourcesContent":["// Chatbot.js good one\n// import React, { useState, useEffect } from 'react';\n// import { getChatbotResponse } from './ChatbotAPI'; // Make sure to implement getChatbotResponse\n// import Header from '../chatbot_components/Header';\n// import Messages from '../chatbot_components/Messages';\n// import Input from '../chatbot_components/Input';\n// // You may choose to import a Loader if you wish to show a loading state\n// import '../chatbot_components/styles.css';\n\n// function Chatbot() {\n//   const [messages, setMessages] = useState([]);\n//   const [isLoading, setIsLoading] = useState(false);\n\n//   // URLs for avatars from the public/avatars folder or a suitable path\n//   const userAvatarUrl = '/avatars/userAvatar.png'; // Update with the actual path\n//   const botAvatarUrl = '/avatars/botAvatar.png'; // Update with the actual path\n\n//   // Fetch the initial welcome message from the bot\n//   useEffect(() => {\n//     async function fetchWelcomeMessage() {\n//       setIsLoading(true);\n//       const welcomeMessage = await getChatbotResponse(''); // Fetch welcome message\n//       setMessages(prevMessages => [...prevMessages, { type: 'bot', text: welcomeMessage, avatar: botAvatarUrl }]);\n//       setIsLoading(false);\n//     }\n\n//     fetchWelcomeMessage();\n//   }, []);\n\n//   const sendMessage = async (text) => {\n//     if (!text.trim()) return; // Prevent sending empty messages\n\n//     // Append the user message to the chat\n//     const userMessage = { type: 'user', text, avatar: userAvatarUrl };\n//     setMessages(prevMessages => [...prevMessages, userMessage]);\n    \n//     setIsLoading(true);\n\n//     const response = await getChatbotResponse(text); // Fetch the bot response\n//     // Append the bot message to the chat\n//     setMessages(prevMessages => [...prevMessages, { type: 'bot', text: response, avatar: botAvatarUrl }]);\n    \n//     setIsLoading(false);\n//   };\n\n//   return (\n//     <div className=\"chatbot-container\">\n//       <Header />\n//       <Messages \n//         messages={messages}\n//         userAvatar={userAvatarUrl}\n//         botAvatar={botAvatarUrl}\n//       />\n//       {/* Uncomment Loader below if you have a Loader component */}\n//       {/* {isLoading && <Loader />} */}\n//       <Input onSend={sendMessage} />\n//     </div>\n//   );\n// }\n\n// export default Chatbot;\n\n\n// import React, { useState, useEffect } from 'react';\n// import Header from '../chatbot_components/Header';\n// import Messages from '../chatbot_components/Messages';\n// import Input from '../chatbot_components/Input';\n// import '../chatbot_components/styles.css';\n\n// function Chatbot(props) {\n//   const [messages, setMessages] = useState([]);\n//   const [isLoading, setIsLoading] = useState(false);\n\n//   const userAvatarUrl = '/avatars/userAvatar.png';\n//   const botAvatarUrl = '/avatars/botAvatar.png';\n\n//   useEffect(() => {\n//     // Fetch the initial welcome message here if needed\n//   }, []);\n\n//   const sendMessage = async (text) => {\n//     if (!text.trim()) return;\n\n//     const userMessage = { type: 'user', text, avatar: userAvatarUrl };\n//     setMessages(prevMessages => [...prevMessages, userMessage]);\n    \n//     setIsLoading(true);\n\n//     // Construct the payload\n//     const payload = {\n//         message: text,\n//         friend_mbti: props.selectedType // Assuming the MBTI type is passed as a prop\n//     };\n\n//     try {\n//       const response = await fetch('/chat/chat_response/', {\n//           method: 'POST',\n//           headers: {\n//               'Content-Type': 'application/json',\n//           },\n//           body: JSON.stringify(payload),\n//       });\n\n//       if (!response.ok) {\n//         throw new Error(`HTTP error! Status: ${response.status}`);\n//       }\n\n//       const data = await response.json();\n//       setMessages(prevMessages => [...prevMessages, { type: 'bot', text: data.message, avatar: botAvatarUrl }]);\n//     } catch (error) {\n//       console.error('Error:', error);\n//       // Handle the error appropriately in the UI\n//     } finally {\n//       setIsLoading(false);\n//     }\n//   };\n\n//   return (\n//     <div className=\"chatbot-container\">\n//       <Header />\n//       <Messages \n//         messages={messages}\n//         userAvatar={userAvatarUrl}\n//         botAvatar={botAvatarUrl}\n//       />\n//       {/* Uncomment Loader below if you have a Loader component */}\n//       {/* {isLoading && <Loader />} */}\n//       <Input onSend={sendMessage} />\n//     </div>\n//   );\n// }\n\n// export default Chatbot;\n\n\n\n// // Chatbot.js\n// import React, { useState, useEffect } from 'react';\n// import { getChatbotResponse } from './ChatbotAPI'; // Make sure to implement getChatbotResponse\n// import Header from '../chatbot_components/Header';\n// import Messages from '../chatbot_components/Messages';\n// import Input from '../chatbot_components/Input';\n// // You may choose to import a Loader if you wish to show a loading state\n// import '../chatbot_components/styles.css';\n\n// function Chatbot(props) {\n//   const [messages, setMessages] = useState([]);\n//   const [isLoading, setIsLoading] = useState(false);\n\n//   // URLs for avatars from the public/avatars folder or a suitable path\n//   const userAvatarUrl = '/avatars/userAvatar.png'; // Update with the actual path\n//   const botAvatarUrl = '/avatars/botAvatar.png'; // Update with the actual path\n\n//   // Fetch the initial welcome message from the bot\n//   // useEffect(() => {\n//   //   async function fetchWelcomeMessage() {\n//   //     setIsLoading(true);\n//   //     const welcomeMessage = await getChatbotResponse(''); // Fetch welcome message\n//   //     setMessages(prevMessages => [...prevMessages, { type: 'bot', text: welcomeMessage, avatar: botAvatarUrl }]);\n//   //     setIsLoading(false);\n//   //   }\n\n//   //   fetchWelcomeMessage();\n//   // }, []);\n\n//   const sendMessage = async (text) => {\n//     if (!text.trim()) return;\n  \n//     const userMessage = { type: 'user', text, avatar: userAvatarUrl };\n//     setMessages(prevMessages => [...prevMessages, userMessage]);\n    \n//     setIsLoading(true);\n  \n//     try {\n//       const responseText = await getChatbotResponse(text, props.selectedType);\n//       setMessages(prevMessages => [...prevMessages, { type: 'bot', text: responseText, avatar: botAvatarUrl }]);\n//     } catch (error) {\n//       console.error('Error:', error);\n//       // Handle the error appropriately in the UI\n//     } finally {\n//       setIsLoading(false);\n//     }\n//   };\n\n//   return (\n//     <div className=\"chatbot-container\">\n//       <Header />\n//       <Messages \n//         messages={messages}\n//         userAvatar={userAvatarUrl}\n//         botAvatar={botAvatarUrl}\n//       />\n//       {/* Uncomment Loader below if you have a Loader component */}\n//       {/* {isLoading && <Loader />} */}\n//       <Input onSend={sendMessage} />\n//     </div>\n//   );\n// }\n\n// export default Chatbot;\n\n\n\n\n\nimport React, { useState, useEffect } from 'react';\nimport { getChatbotResponse } from './ChatbotAPI'; // Make sure to implement getChatbotResponse\nimport { useLocation } from 'react-router-dom'; \nimport Header from '../chatbot_components/Header';\nimport Messages from '../chatbot_components/Messages';\nimport Input from '../chatbot_components/Input';\n// You may choose to import a Loader if you wish to show a loading state\nimport '../chatbot_components/styles.css';\n\nfunction Chatbot() {\n  const [messages, setMessages] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const location = useLocation();\n  const { selectedType, selectedTrait, virtualFriendName } = location.state || {};\n  console.log(\"selectedType:\", selectedType); \n\n  // URLs for avatars from the public/avatars folder or a suitable path\n  const userAvatarUrl = '/avatars/userAvatar.png'; // Update with the actual path\n  const botAvatarUrl = '/avatars/botAvatar.png'; // Update with the actual path\n\n  // Fetch the initial welcome message from the bot\n  useEffect(() => {\n    async function fetchWelcomeMessage() {\n      setIsLoading(true);\n      const welcomeMessage = await getChatbotResponse(''); // Fetch welcome message\n      setMessages(prevMessages => [...prevMessages, { type: 'bot', text: welcomeMessage, avatar: botAvatarUrl }]);\n      setIsLoading(false);\n    }\n\n    fetchWelcomeMessage();\n  }, []);\n\n    // In your Chatbot component in React\n  const sendMessage = async (text) => {\n    if (!text.trim()) return;\n\n    const payload = {\n        message: text,\n        selectedType: selectedType  // Include the selectedType in the request body\n    };\n\n    try {\n        const response = await fetch('/chat/chat_response/', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(payload),\n        });\n\n        if (!response.ok) {\n            throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n\n        const data = await response.json();\n        // Process the response data...\n    } catch (error) {\n        console.error('Error:', error);\n    }\n  };\n  return (\n    <div className=\"chatbot-container\">\n      <Header />\n      <Messages \n        messages={messages}\n        userAvatar={userAvatarUrl}\n        botAvatar={botAvatarUrl}\n      />\n      {/* Uncomment Loader below if you have a Loader component */}\n      {/* {isLoading && <Loader />} */}\n      <Input onSend={sendMessage} />\n    </div>\n  );\n}\n\nexport default Chatbot;"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAMA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,kBAAkB,QAAQ,cAAc,CAAC,CAAC;AACnD,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,MAAM,MAAM,8BAA8B;AACjD,OAAOC,QAAQ,MAAM,gCAAgC;AACrD,OAAOC,KAAK,MAAM,6BAA6B;AAC/C;AACA,OAAO,kCAAkC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,SAASC,OAAOA,CAAA,EAAG;EAAAC,EAAA;EACjB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACa,SAAS,EAAEC,YAAY,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAMe,QAAQ,GAAGZ,WAAW,CAAC,CAAC;EAC9B,MAAM;IAAEa,YAAY;IAAEC,aAAa;IAAEC;EAAkB,CAAC,GAAGH,QAAQ,CAACI,KAAK,IAAI,CAAC,CAAC;EAC/EC,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEL,YAAY,CAAC;;EAE1C;EACA,MAAMM,aAAa,GAAG,yBAAyB,CAAC,CAAC;EACjD,MAAMC,YAAY,GAAG,wBAAwB,CAAC,CAAC;;EAE/C;EACAtB,SAAS,CAAC,MAAM;IACd,eAAeuB,mBAAmBA,CAAA,EAAG;MACnCV,YAAY,CAAC,IAAI,CAAC;MAClB,MAAMW,cAAc,GAAG,MAAMvB,kBAAkB,CAAC,EAAE,CAAC,CAAC,CAAC;MACrDU,WAAW,CAACc,YAAY,IAAI,CAAC,GAAGA,YAAY,EAAE;QAAEC,IAAI,EAAE,KAAK;QAAEC,IAAI,EAAEH,cAAc;QAAEI,MAAM,EAAEN;MAAa,CAAC,CAAC,CAAC;MAC3GT,YAAY,CAAC,KAAK,CAAC;IACrB;IAEAU,mBAAmB,CAAC,CAAC;EACvB,CAAC,EAAE,EAAE,CAAC;;EAEJ;EACF,MAAMM,WAAW,GAAG,MAAOF,IAAI,IAAK;IAClC,IAAI,CAACA,IAAI,CAACG,IAAI,CAAC,CAAC,EAAE;IAElB,MAAMC,OAAO,GAAG;MACZC,OAAO,EAAEL,IAAI;MACbZ,YAAY,EAAEA,YAAY,CAAE;IAChC,CAAC;IAED,IAAI;MACA,MAAMkB,QAAQ,GAAG,MAAMC,KAAK,CAAC,sBAAsB,EAAE;QACjDC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACL,cAAc,EAAE;QACpB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACR,OAAO;MAChC,CAAC,CAAC;MAEF,IAAI,CAACE,QAAQ,CAACO,EAAE,EAAE;QACd,MAAM,IAAIC,KAAK,CAAE,uBAAsBR,QAAQ,CAACS,MAAO,EAAC,CAAC;MAC7D;MAEA,MAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;MAClC;IACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZ1B,OAAO,CAAC0B,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;IAClC;EACF,CAAC;EACD,oBACEtC,OAAA;IAAKuC,SAAS,EAAC,mBAAmB;IAAAC,QAAA,gBAChCxC,OAAA,CAACJ,MAAM;MAAA6C,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACV5C,OAAA,CAACH,QAAQ;MACPM,QAAQ,EAAEA,QAAS;MACnB0C,UAAU,EAAE/B,aAAc;MAC1BgC,SAAS,EAAE/B;IAAa;MAAA0B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACzB,CAAC,eAGF5C,OAAA,CAACF,KAAK;MAACiD,MAAM,EAAEzB;IAAY;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC3B,CAAC;AAEV;AAAC1C,EAAA,CAhEQD,OAAO;EAAA,QAGGN,WAAW;AAAA;AAAAqD,EAAA,GAHrB/C,OAAO;AAkEhB,eAAeA,OAAO;AAAC,IAAA+C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}