{"ast":null,"code":"var _jsxFileName = \"/Users/yuningwu/Documents/EmoAI-frontend/src/chatbot_components/Chatbot.js\",\n  _s = $RefreshSig$();\n// // Chatbot.js\n// import React, { useState, useEffect } from 'react';\n// import { getChatbotResponse } from './ChatbotAPI'; // Make sure to implement getChatbotResponse\n// import Header from '../chatbot_components/Header';\n// import Messages from '../chatbot_components/Messages';\n// import Input from '../chatbot_components/Input';\n// // You may choose to import a Loader if you wish to show a loading state\n// import '../chatbot_components/styles.css';\n\n// function Chatbot() {\n//   const [messages, setMessages] = useState([]);\n//   const [isLoading, setIsLoading] = useState(false);\n\n//   // URLs for avatars from the public/avatars folder or a suitable path\n//   const userAvatarUrl = '/avatars/userAvatar.png'; // Update with the actual path\n//   const botAvatarUrl = '/avatars/botAvatar.png'; // Update with the actual path\n\n//   // Fetch the initial welcome message from the bot\n//   useEffect(() => {\n//     async function fetchWelcomeMessage() {\n//       setIsLoading(true);\n//       const welcomeMessage = await getChatbotResponse(''); // Fetch welcome message\n//       setMessages(prevMessages => [...prevMessages, { type: 'bot', text: welcomeMessage, avatar: botAvatarUrl }]);\n//       setIsLoading(false);\n//     }\n\n//     fetchWelcomeMessage();\n//   }, []);\n\n//   const sendMessage = async (text) => {\n//     if (!text.trim()) return; // Prevent sending empty messages\n\n//     // Append the user message to the chat\n//     const userMessage = { type: 'user', text, avatar: userAvatarUrl };\n//     setMessages(prevMessages => [...prevMessages, userMessage]);\n\n//     setIsLoading(true);\n\n//     const response = await getChatbotResponse(text); // Fetch the bot response\n//     // Append the bot message to the chat\n//     setMessages(prevMessages => [...prevMessages, { type: 'bot', text: response, avatar: botAvatarUrl }]);\n\n//     setIsLoading(false);\n//   };\n\n//   return (\n//     <div className=\"chatbot-container\">\n//       <Header />\n//       <Messages \n//         messages={messages}\n//         userAvatar={userAvatarUrl}\n//         botAvatar={botAvatarUrl}\n//       />\n//       {/* Uncomment Loader below if you have a Loader component */}\n//       {/* {isLoading && <Loader />} */}\n//       <Input onSend={sendMessage} />\n//     </div>\n//   );\n// }\n\n// export default Chatbot;\n\nimport React, { useState, useEffect } from 'react';\nimport Header from '../chatbot_components/Header';\nimport Messages from '../chatbot_components/Messages';\nimport Input from '../chatbot_components/Input';\nimport '../chatbot_components/styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Chatbot(props) {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const userAvatarUrl = '/avatars/userAvatar.png';\n  const botAvatarUrl = '/avatars/botAvatar.png';\n  useEffect(() => {\n    // Fetch the initial welcome message here if needed\n  }, []);\n  const sendMessage = async text => {\n    if (!text.trim()) return;\n    const userMessage = {\n      type: 'user',\n      text,\n      avatar: userAvatarUrl\n    };\n    setMessages(prevMessages => [...prevMessages, userMessage]);\n    setIsLoading(true);\n\n    // Construct the payload\n    const payload = {\n      message: text,\n      friend_mbti: props.selectedType // Assuming the MBTI type is passed as a prop\n    };\n    try {\n      const response = await fetch('/chat/chat_response/', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(payload)\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      const data = await response.json();\n      setMessages(prevMessages => [...prevMessages, {\n        type: 'bot',\n        text: data.message,\n        avatar: botAvatarUrl\n      }]);\n    } catch (error) {\n      console.error('Error:', error);\n      // Handle the error appropriately in the UI\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Messages, {\n      messages: messages,\n      userAvatar: userAvatarUrl,\n      botAvatar: botAvatarUrl\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Input, {\n      onSend: sendMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 5\n  }, this);\n}\n_s(Chatbot, \"0DGH92712YgH5r/7WuW2t2jTWGk=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useEffect","Header","Messages","Input","jsxDEV","_jsxDEV","Chatbot","props","_s","messages","setMessages","isLoading","setIsLoading","userAvatarUrl","botAvatarUrl","sendMessage","text","trim","userMessage","type","avatar","prevMessages","payload","message","friend_mbti","selectedType","response","fetch","method","headers","body","JSON","stringify","ok","Error","status","data","json","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","userAvatar","botAvatar","onSend","_c","$RefreshReg$"],"sources":["/Users/yuningwu/Documents/EmoAI-frontend/src/chatbot_components/Chatbot.js"],"sourcesContent":["// // Chatbot.js\n// import React, { useState, useEffect } from 'react';\n// import { getChatbotResponse } from './ChatbotAPI'; // Make sure to implement getChatbotResponse\n// import Header from '../chatbot_components/Header';\n// import Messages from '../chatbot_components/Messages';\n// import Input from '../chatbot_components/Input';\n// // You may choose to import a Loader if you wish to show a loading state\n// import '../chatbot_components/styles.css';\n\n// function Chatbot() {\n//   const [messages, setMessages] = useState([]);\n//   const [isLoading, setIsLoading] = useState(false);\n\n//   // URLs for avatars from the public/avatars folder or a suitable path\n//   const userAvatarUrl = '/avatars/userAvatar.png'; // Update with the actual path\n//   const botAvatarUrl = '/avatars/botAvatar.png'; // Update with the actual path\n\n//   // Fetch the initial welcome message from the bot\n//   useEffect(() => {\n//     async function fetchWelcomeMessage() {\n//       setIsLoading(true);\n//       const welcomeMessage = await getChatbotResponse(''); // Fetch welcome message\n//       setMessages(prevMessages => [...prevMessages, { type: 'bot', text: welcomeMessage, avatar: botAvatarUrl }]);\n//       setIsLoading(false);\n//     }\n\n//     fetchWelcomeMessage();\n//   }, []);\n\n//   const sendMessage = async (text) => {\n//     if (!text.trim()) return; // Prevent sending empty messages\n\n//     // Append the user message to the chat\n//     const userMessage = { type: 'user', text, avatar: userAvatarUrl };\n//     setMessages(prevMessages => [...prevMessages, userMessage]);\n    \n//     setIsLoading(true);\n\n//     const response = await getChatbotResponse(text); // Fetch the bot response\n//     // Append the bot message to the chat\n//     setMessages(prevMessages => [...prevMessages, { type: 'bot', text: response, avatar: botAvatarUrl }]);\n    \n//     setIsLoading(false);\n//   };\n\n//   return (\n//     <div className=\"chatbot-container\">\n//       <Header />\n//       <Messages \n//         messages={messages}\n//         userAvatar={userAvatarUrl}\n//         botAvatar={botAvatarUrl}\n//       />\n//       {/* Uncomment Loader below if you have a Loader component */}\n//       {/* {isLoading && <Loader />} */}\n//       <Input onSend={sendMessage} />\n//     </div>\n//   );\n// }\n\n// export default Chatbot;\n\n\nimport React, { useState, useEffect } from 'react';\nimport Header from '../chatbot_components/Header';\nimport Messages from '../chatbot_components/Messages';\nimport Input from '../chatbot_components/Input';\nimport '../chatbot_components/styles.css';\n\nfunction Chatbot(props) {\n  const [messages, setMessages] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const userAvatarUrl = '/avatars/userAvatar.png';\n  const botAvatarUrl = '/avatars/botAvatar.png';\n\n  useEffect(() => {\n    // Fetch the initial welcome message here if needed\n  }, []);\n\n  const sendMessage = async (text) => {\n    if (!text.trim()) return;\n\n    const userMessage = { type: 'user', text, avatar: userAvatarUrl };\n    setMessages(prevMessages => [...prevMessages, userMessage]);\n    \n    setIsLoading(true);\n\n    // Construct the payload\n    const payload = {\n        message: text,\n        friend_mbti: props.selectedType // Assuming the MBTI type is passed as a prop\n    };\n\n    try {\n      const response = await fetch('/chat/chat_response/', {\n          method: 'POST',\n          headers: {\n              'Content-Type': 'application/json',\n          },\n          body: JSON.stringify(payload),\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n\n      const data = await response.json();\n      setMessages(prevMessages => [...prevMessages, { type: 'bot', text: data.message, avatar: botAvatarUrl }]);\n    } catch (error) {\n      console.error('Error:', error);\n      // Handle the error appropriately in the UI\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"chatbot-container\">\n      <Header />\n      <Messages \n        messages={messages}\n        userAvatar={userAvatarUrl}\n        botAvatar={botAvatarUrl}\n      />\n      {/* Uncomment Loader below if you have a Loader component */}\n      {/* {isLoading && <Loader />} */}\n      <Input onSend={sendMessage} />\n    </div>\n  );\n}\n\nexport default Chatbot;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}