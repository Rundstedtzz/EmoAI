{"ast":null,"code":"var _jsxFileName = \"/Users/yuningwu/Documents/EmoAI-frontend/src/components/CreateFriend.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import { useNavigate } from 'react-router-dom'; // Import useNavigate from react-router-dom\n// import './CreateFriend.css'; // Make sure to link the correct CSS file\n\n// // Define the MBTI types and their corresponding button colors\n// const mbtiTypes = [\n//   { types: ['INTJ', 'INTP', 'ENTJ', 'ENTP'], color: 'lightpurple' },\n//   { types: ['INFJ', 'INFP', 'ENFJ', 'ENFP'], color: 'lightgreen' },\n//   { types: ['ISTJ', 'ISFJ', 'ESTJ', 'ESFJ'], color: 'lightyellow' },\n//   { types: ['ISTP', 'ISFP', 'ESTP', 'ESFP'], color: 'lightblue' },\n// ];\n\n// function CreateFriend() {\n//   const [selectedType, setSelectedType] = useState(null);\n//   const [selectedTrait, setSelectedTrait] = useState('');\n//   const [virtualFriendName, setVirtualFriendName] = useState('');\n//   const [isReadyToChat, setIsReadyToChat] = useState(false);\n//   const navigate = useNavigate(); // Hook to navigate programmatically\n\n//   useEffect(() => {\n//     // Update the isReadyToChat state based on the current selections\n//     setIsReadyToChat(!!(selectedType && selectedTrait && virtualFriendName.trim()));\n//   }, [selectedType, selectedTrait, virtualFriendName]);\n\n//   const handleTypeClick = (type) => {\n//     setSelectedType(type);\n//     setVirtualFriendName('');\n//     setSelectedTrait('');\n//   };\n\n//   const handleTraitClick = (trait) => {\n//     setSelectedTrait(trait);\n//     setVirtualFriendName('');\n//   };\n\n//   const startChat = () => {\n//     // Navigate to the chatbot page with state\n//     navigate('/chatbot', { state: { selectedType, selectedTrait, virtualFriendName } });\n//   };\n\n//   // Conditional rendering for avatar path\n//   const avatarPath = selectedType && selectedTrait\n//     ? `/avatars/${selectedType}-${selectedTrait}.png`\n//     : '/avatars/default-avatar.png';\n\n//   return (\n//     <div className=\"create-friend-container\">\n//       <div className=\"selection-container\">\n//         <div className=\"mbti-types\">\n//           {mbtiTypes.map((group, index) => (\n//             <div key={index} className=\"mbti-row\">\n//               {group.types.map((type) => (\n//                 <button\n//                   key={type}\n//                   className={`mbti-button ${group.color} ${selectedType === type ? 'selected' : ''}`}\n//                   onClick={() => handleTypeClick(type)}\n//                 >\n//                   {type}\n//                 </button>\n//               ))}\n//             </div>\n//           ))}\n//         </div>\n//         <div className=\"traits\">\n//           <button \n//             className={`trait-button ${selectedTrait === 'Assertive' ? 'selected' : ''}`}\n//             onClick={() => handleTraitClick('Assertive')}\n//           >\n//             Assertive\n//           </button>\n//           <button \n//             className={`trait-button ${selectedTrait === 'Turbulent' ? 'selected' : ''}`}\n//             onClick={() => handleTraitClick('Turbulent')}\n//           >\n//             Turbulent\n//           </button>\n//         </div>\n//       </div>\n//       <div className=\"avatar-and-name-container\">\n//         <div className=\"avatar-display\">\n//           <img src={avatarPath} alt=\"Avatar\" />\n//         </div>\n//         <input \n//           type=\"text\" \n//           placeholder=\"Name your virtual friend\" \n//           className=\"friend-name-input\"\n//           value={virtualFriendName}\n//           onChange={(e) => setVirtualFriendName(e.target.value)}\n//         />\n//         {isReadyToChat && (\n//           <button className=\"start-chat-button\" onClick={startChat}>\n//             Start Chat\n//           </button>\n//         )}\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default CreateFriend;\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport './CreateFriend.css';\n\n// Define the MBTI types and their corresponding button colors\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst mbtiTypes = [{\n  types: ['INTJ', 'INTP', 'ENTJ', 'ENTP'],\n  color: 'lightpurple'\n}, {\n  types: ['INFJ', 'INFP', 'ENFJ', 'ENFP'],\n  color: 'lightgreen'\n}, {\n  types: ['ISTJ', 'ISFJ', 'ESTJ', 'ESFJ'],\n  color: 'lightyellow'\n}, {\n  types: ['ISTP', 'ISFP', 'ESTP', 'ESFP'],\n  color: 'lightblue'\n}];\nfunction CreateFriend() {\n  _s();\n  // ... existing state variables ...\n  const [selectedType, setSelectedType] = useState(null);\n  const [selectedTrait, setSelectedTrait] = useState('');\n  const [virtualFriendName, setVirtualFriendName] = useState('');\n  const [isReadyToChat, setIsReadyToChat] = useState(false);\n  const navigate = useNavigate(); // Hook to navigate programmatically\n  const [avatarUrl, setAvatarUrl] = useState('/avatars/default-avatar.png'); // Initialize with default avatar path\n  const username = localStorage.getItem('username');\n\n  // ... other existing code ...\n\n  useEffect(() => {\n    setIsReadyToChat(!!(selectedType && selectedTrait && virtualFriendName.trim()));\n  }, [selectedType, selectedTrait, virtualFriendName]);\n\n  // ... existing handler functions ...\n  const handleTypeClick = type => {\n    setSelectedType(type);\n    setVirtualFriendName('');\n    setSelectedTrait('');\n  };\n  const handleTraitClick = trait => {\n    setSelectedTrait(trait);\n    setVirtualFriendName('');\n  };\n  const handleGenerateAvatar = async () => {\n    try {\n      const response = await fetch('http://localhost:8000/virtualfriend/generate-avatar/', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          friendName: virtualFriendName,\n          username: username\n        })\n      });\n      if (response.ok) {\n        const data = await response.json();\n        const newAvatarUrl = `http://localhost:8000/media/${data.image_path}`;\n        setAvatarUrl(newAvatarUrl);\n        // setAvatarUrl(data.image_path); // Update the avatarUrl state with the new path\n        console.log(\"data.image_path\", data.image_path);\n      } else {\n        console.error('Failed to generate avatar');\n      }\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n  const startChat = () => {\n    // Navigate to the chatbot page with state\n    navigate('/chatbot', {\n      state: {\n        selectedType,\n        selectedTrait,\n        virtualFriendName\n      }\n    });\n  };\n\n  // Conditional rendering for avatar path\n  const avatarPath = selectedType && selectedTrait ? `/avatars/${selectedType}-${selectedTrait}.png` : '/avatars/default-avatar.png';\n\n  // ... existing JSX ...\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"create-friend-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"selection-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mbti-types\",\n        children: mbtiTypes.map((group, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mbti-row\",\n          children: group.types.map(type => /*#__PURE__*/_jsxDEV(\"button\", {\n            className: `mbti-button ${group.color} ${selectedType === type ? 'selected' : ''}`,\n            onClick: () => handleTypeClick(type),\n            children: type\n          }, type, false, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 19\n          }, this))\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"traits\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: `trait-button ${selectedTrait === 'Assertive' ? 'selected' : ''}`,\n          onClick: () => handleTraitClick('Assertive'),\n          children: \"Assertive\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `trait-button ${selectedTrait === 'Turbulent' ? 'selected' : ''}`,\n          onClick: () => handleTraitClick('Turbulent'),\n          children: \"Turbulent\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"avatar-and-name-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"avatar-display\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: avatarUrl,\n          alt: \"Avatar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Name your virtual friend\",\n        className: \"friend-name-input\",\n        value: virtualFriendName,\n        onChange: e => setVirtualFriendName(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"generate-avatar-button\",\n        onClick: handleGenerateAvatar,\n        children: \"Generate Virtual Friend Avatar with DALL-E 3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 15\n      }, this), isReadyToChat && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"start-chat-button\",\n        onClick: startChat,\n        children: \"Start Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 19\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 184,\n    columnNumber: 7\n  }, this);\n}\n_s(CreateFriend, \"GWhBJytlCDgewmG7O8/sjPwpXCA=\", false, function () {\n  return [useNavigate];\n});\n_c = CreateFriend;\nexport default CreateFriend;\n\n// function CreateFriend() {\n//     // ... existing state variables ...\n//     const [selectedType, setSelectedType] = useState(null);\n//     const [selectedTrait, setSelectedTrait] = useState('');\n//     const [virtualFriendName, setVirtualFriendName] = useState('');\n//     const [isReadyToChat, setIsReadyToChat] = useState(false);\n//     const navigate = useNavigate(); // Hook to navigate programmatically\n//     const [avatarUrl, setAvatarUrl] = useState(''); // State to store the generated avatar URL\n//     const username = localStorage.getItem('username');\n//     // console.log(\"username\", username);\n\n//     useEffect(() => {\n//         setIsReadyToChat(!!(selectedType && selectedTrait && virtualFriendName.trim()));\n//     }, [selectedType, selectedTrait, virtualFriendName]);\n\n//     // ... existing handler functions ...\n//     const handleTypeClick = (type) => {\n//       setSelectedType(type);\n//       setVirtualFriendName('');\n//       setSelectedTrait('');\n//     };\n\n//     const handleTraitClick = (trait) => {\n//       setSelectedTrait(trait);\n//       setVirtualFriendName('');\n//     };\n\n//     const handleGenerateAvatar = async () => {\n//         try {\n//             const response = await fetch('http://localhost:8000/virtualfriend/generate-avatar/', {\n//                 method: 'POST',\n//                 headers: {\n//                     'Content-Type': 'application/json',\n//                 },\n//                 body: JSON.stringify({\n\n//                     friendName: virtualFriendName,\n//                     username: username// Add other required data if necessary\n//                 }),\n//             });\n//             if (response.ok) {\n//                 const data = await response.json();\n//                 setAvatarUrl(data.image_path); // Update the state with the new avatar URL\n//             } else {\n//                 console.error('Failed to generate avatar');\n//             }\n//         } catch (error) {\n//             console.error('Error:', error);\n//         }\n//     };\n//     const startChat = () => {\n//       // Navigate to the chatbot page with state\n//       navigate('/chatbot', { state: { selectedType, selectedTrait, virtualFriendName } });\n//     };\n\n//     // Conditional rendering for avatar path\n//     const avatarPath = selectedType && selectedTrait\n//       ? `/avatars/${selectedType}-${selectedTrait}.png`\n//       : '/avatars/default-avatar.png';\n\n//     // ... existing JSX ...\n\n//     return (\n//       <div className=\"create-friend-container\">\n//         <div className=\"selection-container\">\n//           <div className=\"mbti-types\">\n//             {mbtiTypes.map((group, index) => (\n//               <div key={index} className=\"mbti-row\">\n//                 {group.types.map((type) => (\n//                   <button\n//                     key={type}\n//                     className={`mbti-button ${group.color} ${selectedType === type ? 'selected' : ''}`}\n//                     onClick={() => handleTypeClick(type)}\n//                   >\n//                     {type}\n//                   </button>\n//                 ))}\n//               </div>\n//             ))}\n//           </div>\n//           <div className=\"traits\">\n//             <button \n//               className={`trait-button ${selectedTrait === 'Assertive' ? 'selected' : ''}`}\n//               onClick={() => handleTraitClick('Assertive')}\n//             >\n//               Assertive\n//             </button>\n//             <button \n//               className={`trait-button ${selectedTrait === 'Turbulent' ? 'selected' : ''}`}\n//               onClick={() => handleTraitClick('Turbulent')}\n//             >\n//               Turbulent\n//             </button>\n//           </div>\n//         </div>\n//         <div className=\"avatar-and-name-container\">\n//           <div className=\"avatar-display\">\n//               <img src={avatarUrl || avatarPath} alt=\"Avatar\" />\n//               </div>\n//               <input \n//                   type=\"text\"\n//                   placeholder=\"Name your virtual friend\"\n//                   className=\"friend-name-input\"\n//                   value={virtualFriendName}\n//                   onChange={(e) => setVirtualFriendName(e.target.value)}\n//               />\n//               <button className=\"generate-avatar-button\" onClick={handleGenerateAvatar}>\n//                   Generate Virtual Friend Avatar with DALL-E 3\n//               </button>\n//               {isReadyToChat && (\n//                   <button className=\"start-chat-button\" onClick={startChat}>\n//                       Start Chat\n//                   </button>\n//               )}\n//         </div>\n//       </div>\n//     );\n//   }\n\n// export default CreateFriend;\n// <div className=\"create-friend-container\">\n//     {/* ... existing JSX ... */}\n//     <div className=\"avatar-and-name-container\">\n//         <div className=\"avatar-display\">\n//             <img src={avatarUrl || avatarPath} alt=\"Avatar\" />\n//         </div>\n//         <input \n//             type=\"text\"\n//             placeholder=\"Name your virtual friend\"\n//             className=\"friend-name-input\"\n//             value={virtualFriendName}\n//             onChange={(e) => setVirtualFriendName(e.target.value)}\n//         />\n//         <button className=\"generate-avatar-button\" onClick={handleGenerateAvatar}>\n//             Generate Virtual Friend Avatar with DALL-E 3\n//         </button>\n//         {isReadyToChat && (\n//             <button className=\"start-chat-button\" onClick={startChat}>\n//                 Start Chat\n//             </button>\n//         )}\n//     </div>\n// </div>\n// );\nvar _c;\n$RefreshReg$(_c, \"CreateFriend\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","jsxDEV","_jsxDEV","mbtiTypes","types","color","CreateFriend","_s","selectedType","setSelectedType","selectedTrait","setSelectedTrait","virtualFriendName","setVirtualFriendName","isReadyToChat","setIsReadyToChat","navigate","avatarUrl","setAvatarUrl","username","localStorage","getItem","trim","handleTypeClick","type","handleTraitClick","trait","handleGenerateAvatar","response","fetch","method","headers","body","JSON","stringify","friendName","ok","data","json","newAvatarUrl","image_path","console","log","error","startChat","state","avatarPath","className","children","map","group","index","onClick","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","placeholder","value","onChange","e","target","_c","$RefreshReg$"],"sources":["/Users/yuningwu/Documents/EmoAI-frontend/src/components/CreateFriend.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import { useNavigate } from 'react-router-dom'; // Import useNavigate from react-router-dom\n// import './CreateFriend.css'; // Make sure to link the correct CSS file\n\n// // Define the MBTI types and their corresponding button colors\n// const mbtiTypes = [\n//   { types: ['INTJ', 'INTP', 'ENTJ', 'ENTP'], color: 'lightpurple' },\n//   { types: ['INFJ', 'INFP', 'ENFJ', 'ENFP'], color: 'lightgreen' },\n//   { types: ['ISTJ', 'ISFJ', 'ESTJ', 'ESFJ'], color: 'lightyellow' },\n//   { types: ['ISTP', 'ISFP', 'ESTP', 'ESFP'], color: 'lightblue' },\n// ];\n\n// function CreateFriend() {\n//   const [selectedType, setSelectedType] = useState(null);\n//   const [selectedTrait, setSelectedTrait] = useState('');\n//   const [virtualFriendName, setVirtualFriendName] = useState('');\n//   const [isReadyToChat, setIsReadyToChat] = useState(false);\n//   const navigate = useNavigate(); // Hook to navigate programmatically\n\n//   useEffect(() => {\n//     // Update the isReadyToChat state based on the current selections\n//     setIsReadyToChat(!!(selectedType && selectedTrait && virtualFriendName.trim()));\n//   }, [selectedType, selectedTrait, virtualFriendName]);\n\n//   const handleTypeClick = (type) => {\n//     setSelectedType(type);\n//     setVirtualFriendName('');\n//     setSelectedTrait('');\n//   };\n\n//   const handleTraitClick = (trait) => {\n//     setSelectedTrait(trait);\n//     setVirtualFriendName('');\n//   };\n\n//   const startChat = () => {\n//     // Navigate to the chatbot page with state\n//     navigate('/chatbot', { state: { selectedType, selectedTrait, virtualFriendName } });\n//   };\n\n//   // Conditional rendering for avatar path\n//   const avatarPath = selectedType && selectedTrait\n//     ? `/avatars/${selectedType}-${selectedTrait}.png`\n//     : '/avatars/default-avatar.png';\n\n//   return (\n//     <div className=\"create-friend-container\">\n//       <div className=\"selection-container\">\n//         <div className=\"mbti-types\">\n//           {mbtiTypes.map((group, index) => (\n//             <div key={index} className=\"mbti-row\">\n//               {group.types.map((type) => (\n//                 <button\n//                   key={type}\n//                   className={`mbti-button ${group.color} ${selectedType === type ? 'selected' : ''}`}\n//                   onClick={() => handleTypeClick(type)}\n//                 >\n//                   {type}\n//                 </button>\n//               ))}\n//             </div>\n//           ))}\n//         </div>\n//         <div className=\"traits\">\n//           <button \n//             className={`trait-button ${selectedTrait === 'Assertive' ? 'selected' : ''}`}\n//             onClick={() => handleTraitClick('Assertive')}\n//           >\n//             Assertive\n//           </button>\n//           <button \n//             className={`trait-button ${selectedTrait === 'Turbulent' ? 'selected' : ''}`}\n//             onClick={() => handleTraitClick('Turbulent')}\n//           >\n//             Turbulent\n//           </button>\n//         </div>\n//       </div>\n//       <div className=\"avatar-and-name-container\">\n//         <div className=\"avatar-display\">\n//           <img src={avatarPath} alt=\"Avatar\" />\n//         </div>\n//         <input \n//           type=\"text\" \n//           placeholder=\"Name your virtual friend\" \n//           className=\"friend-name-input\"\n//           value={virtualFriendName}\n//           onChange={(e) => setVirtualFriendName(e.target.value)}\n//         />\n//         {isReadyToChat && (\n//           <button className=\"start-chat-button\" onClick={startChat}>\n//             Start Chat\n//           </button>\n//         )}\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default CreateFriend;\n\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport './CreateFriend.css';\n\n// Define the MBTI types and their corresponding button colors\nconst mbtiTypes = [\n  { types: ['INTJ', 'INTP', 'ENTJ', 'ENTP'], color: 'lightpurple' },\n  { types: ['INFJ', 'INFP', 'ENFJ', 'ENFP'], color: 'lightgreen' },\n  { types: ['ISTJ', 'ISFJ', 'ESTJ', 'ESFJ'], color: 'lightyellow' },\n  { types: ['ISTP', 'ISFP', 'ESTP', 'ESFP'], color: 'lightblue' },\n];\n\nfunction CreateFriend() {\n  // ... existing state variables ...\n    const [selectedType, setSelectedType] = useState(null);\n    const [selectedTrait, setSelectedTrait] = useState('');\n    const [virtualFriendName, setVirtualFriendName] = useState('');\n    const [isReadyToChat, setIsReadyToChat] = useState(false);\n    const navigate = useNavigate(); // Hook to navigate programmatically\n    const [avatarUrl, setAvatarUrl] = useState('/avatars/default-avatar.png'); // Initialize with default avatar path\n    const username = localStorage.getItem('username');\n\n  // ... other existing code ...\n\n\n    useEffect(() => {\n      setIsReadyToChat(!!(selectedType && selectedTrait && virtualFriendName.trim()));\n    }, [selectedType, selectedTrait, virtualFriendName]);\n\n  // ... existing handler functions ...\n    const handleTypeClick = (type) => {\n    setSelectedType(type);\n    setVirtualFriendName('');\n    setSelectedTrait('');\n    };\n\n    const handleTraitClick = (trait) => {\n      setSelectedTrait(trait);\n      setVirtualFriendName('');\n    };\n\n    const handleGenerateAvatar = async () => {\n        try {\n            const response = await fetch('http://localhost:8000/virtualfriend/generate-avatar/', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    friendName: virtualFriendName,\n                    username: username\n                }),\n            });\n            if (response.ok) {\n                const data = await response.json();\n                const newAvatarUrl = `http://localhost:8000/media/${data.image_path}`; \n                setAvatarUrl(newAvatarUrl); \n                // setAvatarUrl(data.image_path); // Update the avatarUrl state with the new path\n                console.log(\"data.image_path\", data.image_path);\n            } else {\n                console.error('Failed to generate avatar');\n            }\n        } catch (error) {\n            console.error('Error:', error);\n        }\n    };\n    const startChat = () => {\n      // Navigate to the chatbot page with state\n      navigate('/chatbot', { state: { selectedType, selectedTrait, virtualFriendName } });\n    };\n  \n    // Conditional rendering for avatar path\n    const avatarPath = selectedType && selectedTrait\n      ? `/avatars/${selectedType}-${selectedTrait}.png`\n      : '/avatars/default-avatar.png';\n\n  // ... existing JSX ...\n\n    return (\n      <div className=\"create-friend-container\">\n        <div className=\"selection-container\">\n          <div className=\"mbti-types\">\n            {mbtiTypes.map((group, index) => (\n              <div key={index} className=\"mbti-row\">\n                {group.types.map((type) => (\n                  <button\n                    key={type}\n                    className={`mbti-button ${group.color} ${selectedType === type ? 'selected' : ''}`}\n                    onClick={() => handleTypeClick(type)}\n                  >\n                    {type}\n                  </button>\n                ))}\n              </div>\n            ))}\n          </div>\n          <div className=\"traits\">\n            <button \n              className={`trait-button ${selectedTrait === 'Assertive' ? 'selected' : ''}`}\n              onClick={() => handleTraitClick('Assertive')}\n            >\n              Assertive\n            </button>\n            <button \n              className={`trait-button ${selectedTrait === 'Turbulent' ? 'selected' : ''}`}\n              onClick={() => handleTraitClick('Turbulent')}\n            >\n              Turbulent\n            </button>\n          </div>\n        </div>\n        <div className=\"avatar-and-name-container\">\n          <div className=\"avatar-display\">\n              <img src={avatarUrl} alt=\"Avatar\" /> \n              </div>\n              <input \n                  type=\"text\"\n                  placeholder=\"Name your virtual friend\"\n                  className=\"friend-name-input\"\n                  value={virtualFriendName}\n                  onChange={(e) => setVirtualFriendName(e.target.value)}\n              />\n              <button className=\"generate-avatar-button\" onClick={handleGenerateAvatar}>\n                  Generate Virtual Friend Avatar with DALL-E 3\n              </button>\n              {isReadyToChat && (\n                  <button className=\"start-chat-button\" onClick={startChat}>\n                      Start Chat\n                  </button>\n              )}\n        </div>\n      </div>\n    );\n  }\n\nexport default CreateFriend;\n\n// function CreateFriend() {\n//     // ... existing state variables ...\n//     const [selectedType, setSelectedType] = useState(null);\n//     const [selectedTrait, setSelectedTrait] = useState('');\n//     const [virtualFriendName, setVirtualFriendName] = useState('');\n//     const [isReadyToChat, setIsReadyToChat] = useState(false);\n//     const navigate = useNavigate(); // Hook to navigate programmatically\n//     const [avatarUrl, setAvatarUrl] = useState(''); // State to store the generated avatar URL\n//     const username = localStorage.getItem('username');\n//     // console.log(\"username\", username);\n\n\n//     useEffect(() => {\n//         setIsReadyToChat(!!(selectedType && selectedTrait && virtualFriendName.trim()));\n//     }, [selectedType, selectedTrait, virtualFriendName]);\n\n//     // ... existing handler functions ...\n//     const handleTypeClick = (type) => {\n//       setSelectedType(type);\n//       setVirtualFriendName('');\n//       setSelectedTrait('');\n//     };\n  \n//     const handleTraitClick = (trait) => {\n//       setSelectedTrait(trait);\n//       setVirtualFriendName('');\n//     };\n  \n//     const handleGenerateAvatar = async () => {\n//         try {\n//             const response = await fetch('http://localhost:8000/virtualfriend/generate-avatar/', {\n//                 method: 'POST',\n//                 headers: {\n//                     'Content-Type': 'application/json',\n//                 },\n//                 body: JSON.stringify({\n\n//                     friendName: virtualFriendName,\n//                     username: username// Add other required data if necessary\n//                 }),\n//             });\n//             if (response.ok) {\n//                 const data = await response.json();\n//                 setAvatarUrl(data.image_path); // Update the state with the new avatar URL\n//             } else {\n//                 console.error('Failed to generate avatar');\n//             }\n//         } catch (error) {\n//             console.error('Error:', error);\n//         }\n//     };\n//     const startChat = () => {\n//       // Navigate to the chatbot page with state\n//       navigate('/chatbot', { state: { selectedType, selectedTrait, virtualFriendName } });\n//     };\n  \n//     // Conditional rendering for avatar path\n//     const avatarPath = selectedType && selectedTrait\n//       ? `/avatars/${selectedType}-${selectedTrait}.png`\n//       : '/avatars/default-avatar.png';\n\n//     // ... existing JSX ...\n\n//     return (\n//       <div className=\"create-friend-container\">\n//         <div className=\"selection-container\">\n//           <div className=\"mbti-types\">\n//             {mbtiTypes.map((group, index) => (\n//               <div key={index} className=\"mbti-row\">\n//                 {group.types.map((type) => (\n//                   <button\n//                     key={type}\n//                     className={`mbti-button ${group.color} ${selectedType === type ? 'selected' : ''}`}\n//                     onClick={() => handleTypeClick(type)}\n//                   >\n//                     {type}\n//                   </button>\n//                 ))}\n//               </div>\n//             ))}\n//           </div>\n//           <div className=\"traits\">\n//             <button \n//               className={`trait-button ${selectedTrait === 'Assertive' ? 'selected' : ''}`}\n//               onClick={() => handleTraitClick('Assertive')}\n//             >\n//               Assertive\n//             </button>\n//             <button \n//               className={`trait-button ${selectedTrait === 'Turbulent' ? 'selected' : ''}`}\n//               onClick={() => handleTraitClick('Turbulent')}\n//             >\n//               Turbulent\n//             </button>\n//           </div>\n//         </div>\n//         <div className=\"avatar-and-name-container\">\n//           <div className=\"avatar-display\">\n//               <img src={avatarUrl || avatarPath} alt=\"Avatar\" />\n//               </div>\n//               <input \n//                   type=\"text\"\n//                   placeholder=\"Name your virtual friend\"\n//                   className=\"friend-name-input\"\n//                   value={virtualFriendName}\n//                   onChange={(e) => setVirtualFriendName(e.target.value)}\n//               />\n//               <button className=\"generate-avatar-button\" onClick={handleGenerateAvatar}>\n//                   Generate Virtual Friend Avatar with DALL-E 3\n//               </button>\n//               {isReadyToChat && (\n//                   <button className=\"start-chat-button\" onClick={startChat}>\n//                       Start Chat\n//                   </button>\n//               )}\n//         </div>\n//       </div>\n//     );\n//   }\n\n// export default CreateFriend;\n        // <div className=\"create-friend-container\">\n        //     {/* ... existing JSX ... */}\n        //     <div className=\"avatar-and-name-container\">\n        //         <div className=\"avatar-display\">\n        //             <img src={avatarUrl || avatarPath} alt=\"Avatar\" />\n        //         </div>\n        //         <input \n        //             type=\"text\"\n        //             placeholder=\"Name your virtual friend\"\n        //             className=\"friend-name-input\"\n        //             value={virtualFriendName}\n        //             onChange={(e) => setVirtualFriendName(e.target.value)}\n        //         />\n        //         <button className=\"generate-avatar-button\" onClick={handleGenerateAvatar}>\n        //             Generate Virtual Friend Avatar with DALL-E 3\n        //         </button>\n        //         {isReadyToChat && (\n        //             <button className=\"start-chat-button\" onClick={startChat}>\n        //                 Start Chat\n        //             </button>\n        //         )}\n        //     </div>\n        // </div>\n    // );\n"],"mappings":"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AC,mBAAmB;QAACK,OAAO,EAAER,SAAU;QAAAI,QAAA,EAAC;MAE1D;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CACX;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAACjD,EAAA,CAzHMD,YAAY;EAAA,QAMAN,WAAW;AAAA;AAAAgE,EAAA,GANvB1D,YAAY;AA2HrB,eAAeA,YAAY;;AAE3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACQ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACJ;AAAA,IAAA0D,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}